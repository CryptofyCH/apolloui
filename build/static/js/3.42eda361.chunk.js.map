{"version":3,"sources":["views/Settings/SettingsMiner/SettingsMiner.js","views/Settings/SettingsWifi/SettingsWifi.js","views/Settings/SettingsGeneral/SettingsGeneral.js","views/Settings/Settings.js","views/Settings/index.js"],"names":["SettingsMiner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","marks","frequency","min","max","data","384","450","480","540","600","612","625","636","648","700","720","744","756","768","796","832","852","876","900","924","954","voltage","fan","0","10","20","30","40","50","60","70","80","90","100","slider","onSelect","bind","assertThisInitialized","autoFanSwitchChange","mode","onChange","name","value","_this$props","_this2","_this$props2","minerMode","node_modules_react_default","a","createElement","react","_ref","i18n","className","reactstrap_es","xl","id","form","lg","react_es","variant","label","color","checked","size","disabled","components","href","rc_slider_es","step","val","Component","SettingsWifi","handleScan","wifiScanMcu","handleClick","ssid","setState","connected","handleConnect","wifiConnectMcu","state","evt","defineProperty","target","wifiPassword","wifis","address","_this$state","md","onClick","for","values","type","bsSize","length","map","wifi","index","key","percentColor","signal","connect","mcuWifiScan","mcuWifiConnect","dispatch","password","SettingsGeneral","repeatPassword","passwordError","repeatPasswordError","handlePasswordChange","changePassword","leftSidebarVisibility","leftSidebarExtended","rightSidebarVisibility","temperatureUnit","_this$state2","placeholder","flush","dataOn","dataOff","changePasswordAction","restartFields","Settings","settings","objectSpread","handleSave","handleSaveAndRestart","save","saveAndRestart","_this$state$settings","oldSettings","changed","isEqual","restartNeeded","pick","Settings_SettingsMiner_SettingsMiner","assign","Settings_SettingsWifi_SettingsWifi","Settings_SettingsGeneral_SettingsGeneral","saveSettings","saveSettingsAndRestartMiner"],"mappings":"uQA2VeA,cAvUb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,CACTC,IAAK,IACLC,IAAK,IACLC,KAAM,CACJC,IAAK,MACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,QAGTC,QAAS,CACPxB,IAAK,IACLC,IAAK,IACLC,KAAM,CACJC,IAAK,MACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,QAGTE,IAAK,CACHzB,IAAK,EACLC,IAAK,IACLC,KAAM,CACJwB,EAAG,MACHC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,MACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,IAAK,SAKX7C,EAAK8C,OAAS,GAId9C,EAAK+C,SAAW/C,EAAK+C,SAASC,KAAd/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAChBA,EAAKkD,oBAAsBlD,EAAKkD,oBAAoBF,KAAzB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAlFVA,wEAqFVmD,IAIPC,EADIjD,KAAKJ,MADPqD,UAEO,CAAEC,KAAM,YAAaC,MAAOH,kDAGjB,IAAAI,EAIhBpD,KAAKJ,MAFPmC,EAFkBqB,EAElBrB,KAGFkB,EALoBG,EAGlBH,UAEO,CAAEC,KAAM,MAAOC,OAAgB,IAATpB,EAAa,GAAK,qCAG1C,IAAAsB,EAAArD,KAAAsD,EAOHtD,KAAKJ,MALP2D,EAFKD,EAELC,UACAzB,EAHKwB,EAGLxB,QACAC,EAJKuB,EAILvB,IACA1B,EALKiD,EAKLjD,UACA4C,EANKK,EAMLL,SAGF,OACEO,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACG,SAAAC,KAAGC,KAAH,OACCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAEEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAG,MACNR,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,WACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,2CAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKG,MAAI,GACPV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,QAAdjB,EACTkB,KAAK,GACLxB,SAAU,kBAAMI,EAAKT,SAAS,QAC9B8B,SAAwB,QAAdnB,IAEZC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,8CACbN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,eAGJT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAIXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,wMAAAU,WAAA,CAA6DnB,EAAAC,EAAAC,cAAA,iBAKrEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,UAAdjB,EACTkB,KAAK,GACLxB,SAAU,kBAAMI,EAAKT,SAAS,UAC9B8B,SAAwB,UAAdnB,IAEZC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,gDACbN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,iBAGJT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAIXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,4MAAAU,WAAA,CAA+DnB,EAAAC,EAAAC,cAAA,iBAKvEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,WAAdjB,EACTkB,KAAK,GACLxB,SAAU,kBAAMI,EAAKT,SAAS,WAC9B8B,SAAwB,WAAdnB,IAEZC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,mDACbN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,kBAGJT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,gOAaJ,WAAdV,GAEAC,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAG,MACNR,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,uBACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,4CAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKG,MAAI,GACPV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,YAAJ,IAA2BT,EAAAC,EAAAC,cAAA,SAAI5B,EAAQ0B,EAAAC,EAAAC,cAAA,QAAMI,UAAU,SAAhB,QAEzCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAIXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,0EAAAU,WAAA,CAAgDnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,SAE1DpB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,YACdN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEvE,IAAK+C,EAAKjD,MAAM0B,QAAQxB,IACxBC,IAAK8C,EAAKjD,MAAM0B,QAAQvB,IACxBH,MAAOiD,EAAKjD,MAAM0B,QAAQtB,KAC1BsE,KAAM,KACN3B,MAAOrB,EACPmB,SAAU,SAAA8B,GAAG,OAAI9B,EAAS,CAAEE,MAAO4B,EAAK7B,KAAM,oBAO1DM,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,cAAJ,IAA6BT,EAAAC,EAAAC,cAAA,SAAIrD,EAAUmD,EAAAC,EAAAC,cAAA,QAAMI,UAAU,SAAhB,UAE7CN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAIXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,4EAAAU,WAAA,CAAkDnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,SAE5DpB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,YACdN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEvE,IAAK+C,EAAKjD,MAAMC,UAAUC,IAC1BC,IAAK8C,EAAKjD,MAAMC,UAAUE,IAC1BH,MAAOiD,EAAKjD,MAAMC,UAAUG,KAC5BsE,KAAM,KACN3B,MAAO9C,EACP4C,SAAU,SAAA8B,GAAG,OAAI9B,EAAS,CAAEE,MAAO4B,EAAK7B,KAAM,sBAO1DM,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,SAAkB,IAATzC,EACTkB,SAAUI,EAAKN,sBAEjBS,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oBAAJ,IAAsClC,GAAO,EAAKyB,EAAAC,EAAAC,cAAA,SAAI3B,EAAIyB,EAAAC,EAAAC,cAAA,QAAMI,UAAU,SAAhB,MAAuC,OAEnGN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,8EAEFT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,YACdN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEvE,IAAK+C,EAAKjD,MAAM2B,IAAIzB,IACpBC,IAAK8C,EAAKjD,MAAM2B,IAAIxB,IACpBuE,KAAM,GACN1E,MAAOiD,EAAKjD,MAAM2B,IAAIvB,KACtBkE,UAAmB,IAAT3C,EACVoB,OAAgB,IAATpB,EAAaA,EAAM,EAC1BkB,SAAU,SAAA8B,GAAG,OAAI9B,EAAS,CAAEE,MAAO4B,EAAK7B,KAAM,gCAlTxD8B,6BCOtBC,cACJ,SAAAA,EAAYrF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiF,IACjBpF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmF,GAAA9E,KAAAH,KAAMJ,KASRsF,WAAa,YAGXC,EAFwBtF,EAAKD,MAArBuF,gBAXStF,EAgBnBuF,YAAc,SAACC,GACbxF,EAAKyF,SAAS,CACZD,KAAMA,EACNE,UAAW,QAnBI1F,EAuBnB2F,cAAgB,SAACH,GAAS,IAChBI,EAAmB5F,EAAKD,MAAxB6F,eACR5F,EAAKyF,SAAS,CAAEC,WAAW,IAE3BE,EAAe5F,EAAK6F,QA3BH7F,EA8BnBoD,SAAW,SAAC0C,GACV9F,EAAKyF,SAALxF,OAAA8F,EAAA,EAAA9F,CAAA,GACG6F,EAAIE,OAAO3C,KAAOyC,EAAIE,OAAO1C,SA7BhCtD,EAAK6F,MAAQ,CACXL,KAAM,KACNS,aAAc,GACdP,UAAW,MANI1F,wEAoCV,IAAAwD,EAAArD,KAAAoD,EACoBpD,KAAKJ,MAAxBmG,EADD3C,EACC2C,MAAOC,EADR5C,EACQ4C,QADRC,EAGmCjG,KAAK0F,MAAvCI,EAHDG,EAGCH,aAAcT,EAHfY,EAGeZ,KAAME,EAHrBU,EAGqBV,UAE5B,OACE/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACG,SAAAC,KAAGC,KAAH,OACCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAG,MACNX,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,UACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,sEAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,GACP1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACED,UAAU,iCACVS,MAAO,UACPE,KAAK,KACL0B,QAAU9C,EAAK6B,YAChB1B,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,UAA4BT,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,mBAE/BT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACbN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,0MAGDoB,IAASE,EACV/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,QACdN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKG,MAAI,GACPV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,IACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOqC,IAAI,gBAAe5C,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,8BAAAoC,OAAA,CAAiBhB,QAAjBV,WAAA,CAAYnB,EAAAC,EAAAC,cAAA,cACtCF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEuC,KAAK,WACLpD,KAAK,eACLe,GAAG,eACHd,MAAQ2C,EACR7C,SAAWI,EAAKJ,SAChBsD,OAAO,SAIb/C,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,IACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQD,UAAU,sBAAsBS,MAAM,UAAUE,KAAK,KAAK0B,QAAU9C,EAAKmC,eAAgBhC,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,gBAIrG,KAEDsB,EACD/B,EAAAC,EAAAC,cAAA,KAAGI,UAAU,mBACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,wIAAAoC,OAAA,CAAmDhB,OAA+FW,WAAlJrB,WAAA,CAA8CnB,EAAAC,EAAAC,cAAA,UAAuCF,EAAAC,EAAAC,cAAA,KAAGkB,KAAM,UAAYoB,EAASlC,UAAU,yBAE7H,QAKVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,GACP1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,8CAAgDN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oBAE/D8B,EAAMS,QAAWjB,EAOnB/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIgC,EAAMU,IAAI,SAACC,EAAMC,GACjB,OAAOnD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAe6C,IAAMD,EAAQ7C,UAAU,YAC5CN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQQ,MAAM,OAAOT,UAAU,MAAMqC,QAAS,WAAQ9C,EAAK+B,YAAYsB,EAAKrB,QAAYqB,EAAKrB,MAC7F7B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUD,UAAU,cAAcS,MAAQsC,YAAaH,EAAKI,OAAQ,WAAa3D,MAAQuD,EAAKI,SAC9FtD,EAAAC,EAAAC,cAAA,SAAOI,UAAU,cAAjB,UAAqCN,EAAAC,EAAAC,cAAA,SAAKgD,EAAKI,OAAV,UAX3CtD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,IACbN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,+GA/GLe,aA6JZ+B,oBAlBS,SAAArB,GACtB,MAAO,CACLK,MAAOL,EAAMsB,YAAYxG,KACzBwF,QAASN,EAAMuB,eAAezG,OAIP,SAAC0G,GAC1B,MAAO,CACL/B,YAAa,WACX+B,EAAS/B,gBAEXM,eAAgB,SAACJ,EAAM8B,GACrBD,EAASzB,YAAe,CAAEJ,OAAM8B,iBAKvBJ,CAA6C9B,WC7JtDmC,cACJ,SAAAA,EAAYxH,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoH,IACjBvH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsH,GAAAjH,KAAAH,KAAMJ,KAED8F,MAAQ,CACXyB,SAAU,GACVE,eAAgB,GAChBC,cAAe,GACfC,oBAAqB,IAGvB1H,EAAK2H,qBAAuB3H,EAAK2H,qBAAqB3E,KAA1B/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAC5BA,EAAKoD,SAAWpD,EAAKoD,SAASJ,KAAd/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAXCA,wEAcV8F,GACP3F,KAAKsF,SAALxF,OAAA8F,EAAA,EAAA9F,CAAA,GACG6F,EAAIE,OAAO3C,KAAOyC,EAAIE,OAAO1C,uDAIX,IAAA8C,EAIjBjG,KAAK0F,MAFPyB,EAFmBlB,EAEnBkB,SACAE,EAHmBpB,EAGnBoB,eAIAI,EACEzH,KAAKJ,MADP6H,eAGGN,EAODA,IAAaE,EAQjBI,EAAeN,GAPbnH,KAAKsF,SAAS,CACZgC,cAAe,0BACfC,oBAAqB,4BATvBvH,KAAKsF,SAAS,CACZgC,cAAe,2DAgBZ,IAAAjE,EAAArD,KAAAoD,EAOHpD,KAAKJ,MALP8H,EAFKtE,EAELsE,sBACAC,EAHKvE,EAGLuE,oBACAC,EAJKxE,EAILwE,uBACAC,EALKzE,EAKLyE,gBACA5E,EANKG,EAMLH,SANK6E,EAcH9H,KAAK0F,MAJPyB,EAVKW,EAULX,SACAE,EAXKS,EAWLT,eACAC,EAZKQ,EAYLR,cACAC,EAbKO,EAaLP,oBAGF,OACE/D,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACG,SAAAC,KAAGC,KAAH,OACCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAEEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,gCACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,kDAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,KAAGI,UAAU,mCACXN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,wGAEFT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKG,MAAI,GACPV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,GACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOqC,IAAI,YAAW5C,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,cACtBT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEuC,KAAK,WACLpD,KAAK,WACLe,GAAG,WACHsC,OAAO,KACPpD,MAAOgE,EACPlE,SAAUI,EAAKJ,WAEjBO,EAAAC,EAAAC,cAAA,QAAMI,UAAU,eACbwD,KAIP9D,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,GACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOqC,IAAI,kBAAiB5C,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,qBAC5BT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEuC,KAAK,WACLpD,KAAK,iBACLe,GAAG,iBACH8D,YAAY,GACZxB,OAAO,KACPpD,MAAOkE,EACPpE,SAAUI,EAAKJ,WAEjBO,EAAAC,EAAAC,cAAA,QAAMI,UAAU,eACbyD,KAIP/D,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,IACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQD,UAAU,sBAAsBS,MAAM,UAAUE,KAAK,KAAK0B,QAAS9C,EAAKmE,sBAAsBhE,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,iBAQhHT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oBACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,+CAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAWiE,OAAK,GACdxE,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAASkD,EACTjD,KAAK,GACLxB,SAAU,kBAAMA,EAAS,CAAEC,KAAM,wBAAyBC,OAAQuE,OAEpElE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,8BAEPT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,0CAEzCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAASmD,EACTlD,KAAK,GACLxB,SAAU,kBAAMA,EAAS,CAAEC,KAAM,sBAAuBC,OAAQwE,OAElEnE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,uBAEPT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,+CAEzCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACR4D,OAAO,QACPC,QAAQ,QACR5D,OAAK,EACLC,MAAM,UACNC,QAA6B,MAApBqD,EACTpD,KAAK,GACLxB,SAAU,kBAAMA,EAAS,CAAEC,KAAM,kBAAmBC,MAA2B,MAApB0E,EAA0B,IAAM,SAE7FrE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,uBAEPT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,wCAI7CT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAI,GAAIH,GAAI,GACfR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAWiE,OAAK,GACdxE,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACbN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEN,UAAU,kBACVO,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAASoD,EACTnD,KAAK,GACLxB,SAAU,kBAAMA,EAAS,CAAEC,KAAM,yBAA0BC,OAAQyE,OAErEpE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,+BAEPT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,iDAUrDT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAWP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oBACXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcD,UAAU,cAAaN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,iEAEvCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKG,MAAI,GACPV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKmC,GAAI,IACP1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAWiE,OAAK,GACdxE,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,IACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQD,UAAU,sBAAsBS,MAAM,UAAUE,KAAK,MAAKjB,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,YAClET,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,yEAG3CT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,IACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQD,UAAU,sBAAsBS,MAAM,UAAUE,KAAK,MAAKjB,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,aAClET,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,qDAG3CT,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,IACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQD,UAAU,sBAAsBS,MAAM,SAASE,KAAK,MAAKjB,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,WACjET,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBAAwBN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oEAzOvCe,aAiQf+B,oBAAQ,KANI,SAAAG,GAAQ,MAAK,CACtCO,eAAgB,SAACN,GACfD,EAASiB,YAAqB,CAAEhB,iBAIrBJ,CAAkCK,YCvQ3CgB,EAAgB,CACpB,YACA,UACA,YACA,OAGIC,cACJ,SAAAA,EAAYzI,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqI,GAAA,IAIfC,GAHFzI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuI,GAAAlI,KAAAH,KAAMJ,KAIGA,MADP0I,SAJe,OAOjBzI,EAAK6F,MAAQ,CACX4C,SAASxI,OAAAyI,EAAA,EAAAzI,CAAA,GAAMwI,IAGjBzI,EAAKoD,SAAWpD,EAAKoD,SAASJ,KAAd/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAChBA,EAAK2I,WAAa3I,EAAK2I,WAAW3F,KAAhB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAClBA,EAAK4I,qBAAuB5I,EAAK4I,qBAAqB5F,KAA1B/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAD,KAbXA,2EAgBO,IAAfqD,EAAeU,EAAfV,KAAMC,EAASS,EAATT,MACfnD,KAAKsF,SAAS,SAAAI,GAAK,MAAK,CACtB4C,SAASxI,OAAAyI,EAAA,EAAAzI,CAAA,GACJ4F,EAAM4C,SADHxI,OAAA8F,EAAA,EAAA9F,CAAA,GAELoD,EAAOC,6CASZuF,EAHiB1I,KAAKJ,MAAd8I,MACa1I,KAAK0F,MAAlB4C,0DASRK,EAH2B3I,KAAKJ,MAAxB+I,gBACa3I,KAAK0F,MAAlB4C,2CAKD,IAAArC,EAaHjG,KAAK0F,MAbFkD,EAAA3C,EAELqC,SACE/E,EAHGqF,EAGHrF,UACAzB,EAJG8G,EAIH9G,QACAzB,EALGuI,EAKHvI,UACA0B,EANG6G,EAMH7G,IACA2F,EAPGkB,EAOHlB,sBACAC,EARGiB,EAQHjB,oBACAC,EATGgB,EASHhB,uBACAC,EAVGe,EAUHf,gBAEFS,EAZKrC,EAYLqC,SAGMO,EAAgB7I,KAAKJ,MAArBiJ,YAEFC,GAAWC,IAAQT,EAAUO,GAC7BG,GAAiBD,IAAQE,IAAKX,EAAUF,GAAgBa,IAAKJ,EAAaT,IAChF,OACE5E,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACXgF,GACFtF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKI,GAAG,MACNX,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYD,UAAU,YACjBkF,GACDxF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEU,KAAK,KACLX,UAAU,kCACVY,UAAWoE,EACX3C,QAASnG,KAAKwI,YAEdhF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,UAGF+E,GACAxF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEU,KAAK,KACLX,UAAU,6BACVqC,QAASnG,KAAKyI,sBAEdjF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,oBAGF+E,GAAiBxF,EAAAC,EAAAC,cAAA,QAAMI,UAAU,QAAON,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,uDACvC+E,GAAiBF,GAAWtF,EAAAC,EAAAC,cAAA,QAAMI,UAAU,QAAON,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAAM,GAAA,qFAQ9DT,EAAAC,EAAAC,cAACwF,EAADpJ,OAAAqJ,OACM,CACF5F,YAAWzB,UAASzB,YAAW0B,OAFnC,CAIEkB,SAAUjD,KAAKiD,YAKjBO,EAAAC,EAAAC,cAAC0F,EAAD,MAGA5F,EAAAC,EAAAC,cAAC2F,EAADvJ,OAAAqJ,OACM,CACFzB,wBAAuBC,sBAAqBC,yBAAwBC,mBAFxE,CAIE5E,SAAUjD,KAAKiD,YAGjBO,EAAAC,EAAAC,cAAA,kBAjHesB,aAqIR+B,oBAdS,SAAArB,GAAK,MAAK,CAChC4C,SAAU5C,EAAM4C,SAChBO,YAAanD,EAAM4C,WAGM,SAAApB,GAAQ,MAAK,CACtCwB,KAAM,SAACJ,GACLpB,EAASoC,YAAahB,KAExBK,eAAgB,SAACL,GACfpB,EAASqC,YAA4BjB,OAI1BvB,CAA6CsB,GC9J7CA","file":"static/js/3.42eda361.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppSwitch } from '@coreui/react';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n} from 'reactstrap';\n\nimport 'rc-slider/assets/index.css';\nimport Slider from 'rc-slider';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\n\nclass SettingsMiner extends Component {\n  constructor(props) {\n    super(props);\n\n    this.marks = {\n      frequency: {\n        min: 384,\n        max: 954,\n        data: {\n          384: 'Min',\n          450: '',\n          480: '',\n          540: '',\n          600: '',\n          612: '',\n          625: '',\n          636: '',\n          648: '',\n          700: '',\n          720: '',\n          744: '',\n          756: '',\n          768: '',\n          796: '',\n          832: '',\n          852: '',\n          876: '',\n          900: '',\n          924: '',\n          954: 'Max'\n        }\n      },\n      voltage: {\n        min: 384,\n        max: 954,\n        data: {\n          384: 'Min',\n          450: '',\n          480: '',\n          540: '',\n          600: '',\n          612: '',\n          625: '',\n          636: '',\n          648: '',\n          700: '',\n          720: '',\n          744: '',\n          756: '',\n          768: '',\n          796: '',\n          832: '',\n          852: '',\n          876: '',\n          900: '',\n          924: '',\n          954: 'Max'\n        }\n      },\n      fan: {\n        min: 0,\n        max: 100,\n        data: {\n          0: 'Min',\n          10: '',\n          20: '',\n          30: '',\n          40: '',\n          50: '50%',\n          60: '',\n          70: '',\n          80: '',\n          90: '',\n          100: 'Max'\n        }\n      }\n    };\n\n    this.slider = {\n\n    };\n\n    this.onSelect = this.onSelect.bind(this);\n    this.autoFanSwitchChange = this.autoFanSwitchChange.bind(this);\n  }\n\n  onSelect(mode) {\n    const {\n      onChange,\n    } = this.props;\n    onChange({ name: 'minerMode', value: mode });\n  }\n\n  autoFanSwitchChange() {\n    const {\n      fan,\n      onChange,\n    } = this.props;\n    onChange({ name: 'fan', value: fan === -1 ? 0 : -1 });\n  }\n\n  render() {\n    const {\n      minerMode,\n      voltage,\n      fan,\n      frequency,\n      onChange,\n    } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              { /* Miner */ }\n              <Col xl=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle><Trans>Miner</Trans></CardTitle>\n                    <CardSubtitle className=\"text-muted\"><Trans>Manage miner specific configurations</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Form>\n                      <Row form>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"primary\"\n                                checked={minerMode === 'eco'}\n                                size=\"\"\n                                onChange={() => this.onSelect('eco')}\n                                disabled={minerMode === 'eco'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-leaf mr-2 initialism text-secondary\" />\n                                <Trans>ECO mode</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>In ECO mode your miner will consume less power (about <b>1.0W/MHs</b>) but its hashrate will be slower. This mode is recommende if you want have less noise and less possible to overheat your miner.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={minerMode === 'turbo'}\n                                size=\"\"\n                                onChange={() => this.onSelect('turbo')}\n                                disabled={minerMode === 'turbo'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-rocket mr-2 initialism text-secondary\" />\n                                <Trans>TURBO mode</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>In Turbo mode your miner will consume more power (about <b>1.4W/MHs</b>) and so its hashrate will be faster. This mode is good to gain the maximum profit but you need to take care of possible overheat.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"warning\"\n                                checked={minerMode === 'custom'}\n                                size=\"\"\n                                onChange={() => this.onSelect('custom')}\n                                disabled={minerMode === 'custom'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-diagnoses mr-2 initialism text-secondary\" />\n                                <Trans>Custom mode</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                <Trans>In custom mode you can control frequency and voltage of your miner for your specific needs. This mode is for expert users and is not recommended if you don't know what you are doing. You could harm your miner.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n\n            {\n              minerMode === 'custom'\n              && (\n              <Row>\n                <Col xl=\"12\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle><Trans>Miner custom mode</Trans></CardTitle>\n                      <CardSubtitle className=\"text-muted\"><Trans>Personalise your miner configurations</Trans></CardSubtitle>\n                    </CardHeader>\n                    <CardBody>\n                      <Form>\n                        <Row form>\n                          <Col lg={12} xl={4}>\n                            <div>\n                              <div className=\"clearfix\">\n                                <h4><Trans>Voltage</Trans> <b>{voltage}<span className=\"small\">V</span></b></h4>\n                              </div>\n                              <div>\n                                <p className=\"text-muted \">\n                                  { \n                                  // eslint-disable-next-line \n                                  }\n                                  <Trans>You can set your miner custom voltage or <a href=\"\">reset</a> to default value.</Trans>\n                                </p>\n                                <Card className=\"border-0\">\n                                  <CardBody>\n                                    <Slider\n                                      min={this.marks.voltage.min}\n                                      max={this.marks.voltage.max}\n                                      marks={this.marks.voltage.data}\n                                      step={null}\n                                      value={voltage}\n                                      onChange={val => onChange({ value: val, name: 'voltage' })}\n                                    />\n                                  </CardBody>\n                                </Card>\n                              </div>\n                            </div>\n                          </Col>\n                          <Col lg={12} xl={4}>\n                            <div>\n                              <div className=\"clearfix\">\n                                <h4><Trans>Frequency</Trans> <b>{frequency}<span className=\"small\">MHz</span></b></h4>\n                              </div>\n                              <div>\n                                <p className=\"text-muted \">\n                                  { \n                                  // eslint-disable-next-line \n                                  }\n                                  <Trans>You can set your miner custom frequency or <a href=\"\">reset</a> to default value.</Trans>\n                                </p>\n                                <Card className=\"border-0\">\n                                  <CardBody>\n                                    <Slider\n                                      min={this.marks.frequency.min}\n                                      max={this.marks.frequency.max}\n                                      marks={this.marks.frequency.data}\n                                      step={null}\n                                      value={frequency}\n                                      onChange={val => onChange({ value: val, name: 'frequency' })}\n                                    />\n                                  </CardBody>\n                                </Card>\n                              </div>\n                            </div>\n                          </Col>\n                          <Col lg={12} xl={4}>\n                            <div>\n                              <div className=\"clearfix\">\n                                <AppSwitch\n                                  className=\"float-left mr-2\"\n                                  variant=\"pill\"\n                                  label\n                                  color=\"success\"\n                                  checked={fan === -1}\n                                  onChange={this.autoFanSwitchChange}\n                                />\n                                <h4><Trans>Auto adjust fan</Trans> { (fan > -1) ? <b>{fan}<span className=\"small\">%</span></b> : null }</h4>\n                              </div>\n                              <div>\n                                <p className=\"text-muted \">\n                                  <Trans>Keep fan speed at auto mode or turn of it to manually set the fan speed.</Trans>\n                                </p>\n                                <Card className=\"border-0\">\n                                  <CardBody>\n                                    <Slider\n                                      min={this.marks.fan.min}\n                                      max={this.marks.fan.max}\n                                      step={10}\n                                      marks={this.marks.fan.data}\n                                      disabled={fan === -1}\n                                      value={fan !== -1 ? fan : 0}\n                                      onChange={val => onChange({ value: val, name: 'fan' })}\n                                    />\n                                  </CardBody>\n                                </Card>\n                              </div>\n                            </div>\n                          </Col>\n                        </Row>\n                      </Form>\n                    </CardBody>\n                  </Card>\n                </Col>\n              </Row>\n              )\n            }\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default SettingsMiner;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem,\n  Progress\n} from 'reactstrap';\n\nimport { wifiScanMcu, wifiConnectMcu } from '../../../actions/mcu';\nimport { percentColor } from '../../Filters';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass SettingsWifi extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ssid: null,\n      wifiPassword: '',\n      connected: null\n    };\n  }\n\n  handleScan = () => {\n    const { wifiScanMcu } = this.props;\n\n    wifiScanMcu();\n  }\n\n  handleClick = (ssid) => {\n    this.setState({\n      ssid: ssid,\n      connected: null\n    });\n  }\n\n  handleConnect = (ssid) => {\n    const { wifiConnectMcu } = this.props;\n    this.setState({ connected: true });\n\n    wifiConnectMcu(this.state)\n  }\n\n  onChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  render() {\n    const { wifis, address } = this.props\n\n    const { wifiPassword, ssid, connected } = this.state\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              <Col lg=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle><Trans>Wifi</Trans></CardTitle>\n                    <CardSubtitle className=\"text-muted\"><Trans>Connect your system controller to a Wifi instead using ethernet</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Row>\n                      <Col md={6}>\n                        <div>\n                          <div className=\"clearfix\">\n                            <h4>\n                              <Button \n                                className=\"float-left mr-2 text-uppercase\" \n                                color={'primary'} \n                                size=\"sm\"\n                                onClick={ this.handleScan }\n                              ><Trans>Scan</Trans></Button><Trans>Look for Wifi</Trans>\n                            </h4>\n                            <div className=\"mt-1\">\n                              <p className=\"text-muted \">\n                                <Trans>Clicking the button your system will scan for available wifi networks. Be aware that connecting to a Wifi network you will need to connect to the new Wifi IP address you have to find in your LAN.</Trans>\n                              </p>\n                            </div>\n                            { (ssid && !connected) ?\n                              <Form className=\"mt-4\">\n                                <Row form>\n                                  <Col md={12}>\n                                    <FormGroup>\n                                      <Label for=\"wifiPassword\"><Trans>Wifi <b>{ ssid }</b> Password</Trans></Label>\n                                      <Input\n                                        type=\"password\"\n                                        name=\"wifiPassword\"\n                                        id=\"wifiPassword\"\n                                        value={ wifiPassword }\n                                        onChange={ this.onChange }\n                                        bsSize=\"lg\"\n                                      />\n                                    </FormGroup>\n                                  </Col>\n                                  <Col md={12}>\n                                    <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={ this.handleConnect }><Trans>Connect</Trans></Button>\n                                  </Col>\n                                </Row>\n                              </Form>\n                              : null\n                            }\n                            { (connected) ?\n                              <p className=\"text-muted lead\">\n                                <Trans>Your controller should be connected to <b>{ ssid }</b> Wifi now. Try to go to <a href={'http://' + address} className=\"font-weight-bold\">{ address }</a> before disconnecting the ethernet cable.</Trans>\n                              </p>\n                              : null\n                            }\n                          </div>\n                        </div>\n                      </Col>\n                      <Col md={6}>\n                        <div>\n                          <div className=\"clearfix\">\n                            <h4><i className=\"fa fa-wifi mr-2 initialism text-secondary\"></i><Trans>Wifi networks</Trans></h4>\n                          </div>\n                          { (!wifis.length && !connected) ?\n                            <div className=\"\">\n                              <p className=\"text-muted \">\n                                <Trans>There are no wifi networks available yet. Please click the scan button to look at them.</Trans>\n                              </p>\n                            </div>\n                          : \n                            <ListGroup>\n                              { wifis.map((wifi, index) => {\n                                return <ListGroupItem key={ index } className=\"border-0\">\n                                  <Button color=\"link\" className=\"p-0\" onClick={() => { this.handleClick(wifi.ssid) } }>{ wifi.ssid }</Button>\n                                  <Progress className=\"progress-xs\" color={ percentColor(wifi.signal, 'inverse') } value={ wifi.signal } />\n                                  <small className=\"text-muted\">Signal <b>{ wifi.signal }%</b></small>\n                                </ListGroupItem>\n                              })}\n                            </ListGroup>\n                          }\n                        </div>\n                      </Col>\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    wifis: state.mcuWifiScan.data,\n    address: state.mcuWifiConnect.data\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    wifiScanMcu: () => {\n      dispatch(wifiScanMcu())\n    },\n    wifiConnectMcu: (ssid, password) => {\n      dispatch(wifiConnectMcu({ ssid, password }))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsWifi);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { AppSwitch } from '@coreui/react';\nimport {\n  Button,\n  CardDeck,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem,\n} from 'reactstrap';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\n\nimport { changePassword as changePasswordAction } from '../../../actions/auth';\n\nclass SettingsGeneral extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n      repeatPassword: '',\n      passwordError: '',\n      repeatPasswordError: '',\n    };\n\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  handlePasswordChange() {\n    const {\n      password,\n      repeatPassword,\n    } = this.state;\n\n    const {\n      changePassword,\n    } = this.props;\n\n    if (!password) {\n      this.setState({\n        passwordError: 'Password is required.',\n      });\n      return;\n    }\n\n    if (password !== repeatPassword) {\n      this.setState({\n        passwordError: 'Passwords do not match.',\n        repeatPasswordError: 'Passwords do not match.',\n      });\n      return;\n    }\n\n    changePassword(password);\n  }\n\n  render() {\n    const {\n      leftSidebarVisibility,\n      leftSidebarExtended,\n      rightSidebarVisibility,\n      temperatureUnit,\n      onChange,\n    } = this.props;\n\n    const {\n      password,\n      repeatPassword,\n      passwordError,\n      repeatPasswordError,\n    } = this.state;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <CardDeck>\n              { /* Lockscreen */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><Trans>Change lockscreen password</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Change the password to access the dashboard</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <p className=\"help-block form-text text-muted\">\n                    <Trans>Changing the password will lock the dashboard. You will need to use the new password to unlock it.</Trans>\n                  </p>\n                  <Form>\n                    <Row form>\n                      <Col md={6}>\n                        <FormGroup>\n                          <Label for=\"password\"><Trans>Password</Trans></Label>\n                          <Input\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"password\"\n                            bsSize=\"lg\"\n                            value={password}\n                            onChange={this.onChange}\n                          />\n                          <span className=\"text-danger\">\n                            {passwordError}\n                          </span>\n                        </FormGroup>\n                      </Col>\n                      <Col md={6}>\n                        <FormGroup>\n                          <Label for=\"repeatPassword\"><Trans>Repeat password</Trans></Label>\n                          <Input\n                            type=\"password\"\n                            name=\"repeatPassword\"\n                            id=\"repeatPassword\"\n                            placeholder=\"\"\n                            bsSize=\"lg\"\n                            value={repeatPassword}\n                            onChange={this.onChange}\n                          />\n                          <span className=\"text-danger\">\n                            {repeatPasswordError}\n                          </span>\n                        </FormGroup>\n                      </Col>\n                      <Col md={12}>\n                        <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={this.handlePasswordChange}><Trans>Change</Trans></Button>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n\n              { /* Layout */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><Trans>Layout options</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Manage dashboard specific configurations</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <Row>\n                      <Col lg={12} xl={6}>\n                        <ListGroup flush>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={leftSidebarVisibility}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'leftSidebarVisibility', value: !leftSidebarVisibility })}\n                              />\n                              <div><Trans>Left Sidebar visibility</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set left sidebar default visibility</Trans></div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={leftSidebarExtended}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'leftSidebarExtended', value: !leftSidebarExtended })}\n                              />\n                              <div><Trans>Extended sidebar</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Keep left sidebar extended or only icons</Trans></div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                dataOn=\"°C\"\n                                dataOff=\"°F\"\n                                label\n                                color=\"success\"\n                                checked={temperatureUnit === 'c'}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'temperatureUnit', value: temperatureUnit === 'f' ? 'c' : 'f' })}\n                              />\n                              <div><Trans>Temperature unit</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set it to Celsius or Fahrenheit</Trans></div>\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Col>\n                      <Col lg={12} xl={6}>\n                        <ListGroup flush>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={rightSidebarVisibility}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'rightSidebarVisibility', value: !rightSidebarVisibility })}\n                              />\n                              <div><Trans>Right sidebar visibility</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set right sidebar default visibility</Trans></div>\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n\n              { /* Backup/Reset */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><Trans>Backup &amp; Reset</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Use this tools to backup, restore and reset configurations</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <Row form>\n                      <Col md={12}>\n                        <ListGroup flush>\n                          <ListGroupItem>\n                            <div className=\"\">\n                              <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\"><Trans>Backup</Trans></Button>\n                              <div className=\"mt-1 small text-muted\"><Trans>Create a backup file of dashboard, miner and pools configurations</Trans></div>\n                            </div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"\">\n                              <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\"><Trans>Restore</Trans></Button>\n                              <div className=\"mt-1 small text-muted\"><Trans>Restore all configurations from a backup file</Trans></div>\n                            </div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"\">\n                              <Button className=\"mr-2 text-uppercase\" color=\"danger\" size=\"sm\"><Trans>Reset</Trans></Button>\n                              <div className=\"mt-1 small text-muted\"><Trans>Reset all configurations to factory default</Trans></div>\n                            </div>\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n            </CardDeck>\n\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  changePassword: (password) => {\n    dispatch(changePasswordAction({ password }));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(SettingsGeneral);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  Col,\n  Row,\n} from 'reactstrap';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\n\nimport { Trans } from '@lingui/macro';\n\nimport SettingsMiner from './SettingsMiner/SettingsMiner';\nimport SettingsWifi from './SettingsWifi/SettingsWifi';\nimport SettingsGeneral from './SettingsGeneral/SettingsGeneral';\nimport { saveSettings, saveSettingsAndRestartMiner } from '../../actions/settings';\n\nconst restartFields = [\n  'minerMode',\n  'voltage',\n  'frequency',\n  'fan',\n];\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      settings,\n    } = this.props;\n\n    this.state = {\n      settings: { ...settings },\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleSaveAndRestart = this.handleSaveAndRestart.bind(this);\n  }\n\n  onChange({ name, value }) {\n    this.setState(state => ({\n      settings: {\n        ...state.settings,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSave() {\n    const { save } = this.props;\n    const { settings } = this.state;\n\n    save(settings);\n  }\n\n  handleSaveAndRestart() {\n    const { saveAndRestart } = this.props;\n    const { settings } = this.state;\n\n    saveAndRestart(settings);\n  }\n\n  render() {\n    const {\n      settings: {\n        minerMode,\n        voltage,\n        frequency,\n        fan,\n        leftSidebarVisibility,\n        leftSidebarExtended,\n        rightSidebarVisibility,\n        temperatureUnit,\n      },\n      settings,\n    } = this.state;\n\n    const { oldSettings } = this.props;\n\n    const changed = !isEqual(settings, oldSettings);\n    const restartNeeded = !isEqual(pick(settings, restartFields), pick(oldSettings, restartFields));\n    return (\n      <div className=\"animated fadeIn\">\n        { changed && (\n        <Row>\n          <Col lg=\"12\">\n            <Card>\n              <CardHeader className=\"bg-dark\">\n                { !restartNeeded && (\n                  <Button\n                    size=\"sm\"\n                    className=\"btn-success text-uppercase mr-2\"\n                    disabled={!changed}\n                    onClick={this.handleSave}\n                  >\n                    <Trans>Save</Trans>\n                  </Button>\n                )}\n                { restartNeeded && (\n                  <Button\n                    size=\"sm\"\n                    className=\"btn-warning text-uppercase\"\n                    onClick={this.handleSaveAndRestart}\n                  >\n                    <Trans>Save &amp; Restart</Trans>\n                  </Button>\n                )}\n                { restartNeeded && <span className=\"ml-2\"><Trans>You need to restart your miner to apply changes.</Trans></span> }\n                { !restartNeeded && changed && <span className=\"ml-2\"><Trans>You need to save your settings to apply changes (miner won't be restarted).</Trans></span> }\n              </CardHeader>\n            </Card>\n          </Col>\n        </Row>\n        )}\n\n        { /* Miner conf */ }\n        <SettingsMiner\n          {...{\n            minerMode, voltage, frequency, fan,\n          }}\n          onChange={this.onChange}\n        />\n\n        { /* Wifi */ }\n\n        <SettingsWifi />\n\n        { /* General options */ }\n        <SettingsGeneral\n          {...{\n            leftSidebarVisibility, leftSidebarExtended, rightSidebarVisibility, temperatureUnit,\n          }}\n          onChange={this.onChange}\n        />\n\n        <p />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  oldSettings: state.settings,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  save: (settings) => {\n    dispatch(saveSettings(settings));\n  },\n  saveAndRestart: (settings) => {\n    dispatch(saveSettingsAndRestartMiner(settings));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import Settings from './Settings'\n\nexport default Settings"],"sourceRoot":""}