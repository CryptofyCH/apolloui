{"version":3,"sources":["views/Widgets/DashboardWidget.js","views/Modals/ModalsRawStats.js","views/Pools/PoolsTable/index.js","views/Pools/PoolsTable/PoolsTable.js","views/Dashboard/Dashboard.js","views/Dashboard/index.js"],"names":["DashboardWidget","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateDimensions","widgets","ReactDOM","findDOMNode","assertThisInitialized","getElementsByClassName","smallWidth","offsetWidth","widgetClasses","state","setState","window","addEventListener","removeEventListener","node_modules_react_default","a","createElement","reactstrap_es","className","bgColor","icon","value","title","color","progressColor","progressValue","secondaryTitle","secondaryValue","Component","ModalsRawStats","miner","isOpen","toggle","size","lg","JSON","stringify","stats","connect","minerStats","data","PoolsTable","_this$props","pools","utility","react","_ref","i18n","responsive","id","map","pool","index","key","url","stratumActive","status","DisplayHashrate","lastShareTime","moment","to","accepted","rejected","discarded","getworks","user","Dashboard","openModalsRawStats","modalsRawStats","minerError","mcuError","mcu","loadingMiner","settings","minerTotalShares","summary","hardwareErrors","minerpercentageRejected","Math","round","minerpercentageError","errorsColor","minerUptime","subtract","elapsed","mainPool","_","find","lastShare","lastShareColor","timestamp","format","diffLastShare","Loading","show","bg","centerTitle","subtitle","error","centerSubtitle","showBtn","showProgress","ref","Modals_ModalsRawStats","xs","md","xl","Widgets_DashboardWidget","mHSAv","temperature","Number","toFixed","minerMode","voltage","frequency","fan","Pools_PoolsTable","workUtility","onClick","loadingMcu","mcuStats","loading"],"mappings":"qPAoDeA,cA3Cb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,iBAAmB,WACjB,IAAMC,EAAUC,IAASC,YAATT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAA2BY,uBAAuB,UAC5DC,EAAcL,EAAQ,IAAMA,EAAQ,GAAGM,aAAeN,EAAQ,GAAGM,aAAe,MAAQ,EAC1FC,EAAgBf,EAAKgB,MAAMD,cAE3BF,EAAYE,GAAiB,eAC5BA,EAAgB,0CAErBf,EAAKiB,SAAS,CAAEF,cAAeA,KAd/Bf,EAAKgB,MAAQ,CACXD,cAAe,2CAHCf,mFAoBlBG,KAAKI,mBACLW,OAAOC,iBAAiB,SAAUhB,KAAKI,iEAIvCW,OAAOE,oBAAoB,SAAUjB,KAAKI,mDAI1C,OACEc,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAWtB,KAAKJ,MAAM2B,SAC1BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,UAAU,UAClBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAWtB,KAAKJ,MAAM4B,KAAO,gBAC3EN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAUtB,KAAKJ,MAAM6B,OACpCP,EAAAC,EAAAC,cAAA,WAAMpB,KAAKJ,MAAM8B,OACjBR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,UAAU,mBAAmBK,MAAO3B,KAAKJ,MAAMgC,cAAeH,MAAOzB,KAAKJ,MAAMiC,gBAC1FX,EAAAC,EAAAC,cAAA,SAAOE,UAAWtB,KAAKa,MAAMD,eAAgBZ,KAAKJ,MAAMkC,eAAxD,KAAyEZ,EAAAC,EAAAC,cAAA,SAAIpB,KAAKJ,MAAMmC,0BArCpEC,sBCWxBC,mLAGK,IACCC,EAAUlC,KAAKJ,MAAfsC,MAER,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOc,OAAQnC,KAAKJ,MAAMuC,OAAQC,OAAQpC,KAAKJ,MAAMwC,OAAQd,UAAWtB,KAAKJ,MAAM0B,UAAWe,KAAK,MACjGnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaC,UAAU,WAAWc,OAAQpC,KAAKJ,MAAMwC,QAArD,mBACAlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKiB,GAAG,MACNpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WAAMmB,KAAKC,UAAUN,EAAMO,MAAO,KAAM,kBAf/BT,aA+BdU,oBAJS,SAAA7B,GAAK,MAAK,CAChCqB,MAAOrB,EAAM8B,WAAWC,OAGXF,CAAyBT,GChDzBY,mLCaJ,IAAAC,EACoB9C,KAAKJ,MAAxBmD,EADDD,EACCC,MAAOC,EADRF,EACQE,QAEf,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,KAAD,KACG,SAAAC,KAAGC,KAAH,OACCjC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAO+B,YAAU,EAAC9B,UAAU,mCAC1BJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAcJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBACzCJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,SACJnC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,UACJnC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,YACJnC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,cACJnC,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,gBAGRnC,EAAAC,EAAAC,cAAA,SAAOE,UAAU,YACbyB,EAAMH,KAAKU,IAAI,SAASC,EAAMC,GAC9B,OAAOtC,EAAAC,EAAAC,cAAA,MAAIqC,IAAKD,GACZtC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAQH,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,aAEVnC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+BAAgCiC,EAAKG,MAEtDxC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACZJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAOJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOM,MAAQ4B,EAAKI,cAAgB,UAAY,SAAYJ,EAAKI,cAAgB,OAAS,cAEjHzC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAOJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOM,MAAwB,UAAhB4B,EAAKK,OAAqB,UAAY,UAAaL,EAAKK,UAE9F1C,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACXiC,EAAKI,cACNzC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBACZJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,8BADf,IACkDuC,YAA0B,SAAVb,EAAoB,MAGtF9B,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAAA,UACImC,EAAKO,cAAgBC,MAASC,GAAGD,IAAOR,EAAKO,cAAe,MAAQ,SAExE5C,EAAAC,EAAAC,cAAA,UACImC,EAAKU,UAET/C,EAAAC,EAAAC,cAAA,UACImC,EAAKW,UAEThD,EAAAC,EAAAC,cAAA,UACImC,EAAKY,WAETjD,EAAAC,EAAAC,cAAA,UACImC,EAAKa,UAETlD,EAAAC,EAAAC,cAAA,UAAMmC,EAAKc,oBA/DNrC,aCSnBsC,cACJ,SAAAA,EAAY1E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsE,IACjBzE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwE,GAAAnE,KAAAH,KAAMJ,KAMR2E,mBAAqB,WACnB1E,EAAKiB,SAAS,CACZ0D,gBAAiB3E,EAAKgB,MAAM2D,kBAP9B3E,EAAKgB,MAAQ,CACX2D,gBAAgB,GAHD3E,wEAaV,IAAAiD,EAC8D9C,KAAKJ,MAAlE6E,EADD3B,EACC2B,WAAYC,EADb5B,EACa4B,SAAUC,EADvB7B,EACuB6B,IAAmBzC,GAD1CY,EAC4B8B,aAD5B9B,EAC0CZ,OAAO2C,EADjD/B,EACiD+B,SAGlDC,EAAoB5C,EAAMO,MAAMsC,QAAQnC,KAAKoC,eAAiB9C,EAAMO,MAAMsC,QAAQnC,KAAKqB,SAAW/B,EAAMO,MAAMsC,QAAQnC,KAAKsB,SAC3He,EAA0BC,KAAKC,MAA0C,IAApCjD,EAAMO,MAAMsC,QAAQnC,KAAKsB,SAAiBY,EAAmB,KAAO,IACzGM,EAAuBF,KAAKC,MAAgD,IAA1CjD,EAAMO,MAAMsC,QAAQnC,KAAKoC,eAAuBF,EAAmB,KAAO,IAC9GO,EAAc,UACdD,GAAwB,IAAMA,GAAwB,GAAIC,EAAc,UACnED,EAAuB,KAAIC,EAAc,UAGlD,IAAMC,EAAcvB,MAASC,GAAGD,MAASwB,SAASrD,EAAMO,MAAMsC,QAAQnC,KAAK4C,QAAS,YAAY,GAG1FC,EAAWC,IAAEC,KAAKzD,EAAMO,MAAMM,MAAMH,KAAM,CAAEe,eAAe,IAG7DiC,EAAY,gBACZ9B,EAAgB,EAChB+B,EAAiB,UACfC,EAAY/B,MAASgC,OAAO,KAC9BN,GAAYA,EAAS3B,gBACvB8B,EAAY7B,MAASC,GAAGD,IAAO0B,EAAS3B,cAAe,MACvDA,EAAgB2B,EAAS3B,eAE3B,IAAMkC,EAAgBF,EAAYhC,EAIlC,OAHIkC,GAAiB,KAAOA,GAAiB,IAAKH,EAAiB,UAC1DG,EAAgB,MAAKH,EAAiB,UAE3CpB,EAEAvD,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACEC,MAAM,EACNC,GAAG,OACHzE,MAAM,kFACN0E,aAAa,EACbC,SAAS,iGACTC,MAAQ7B,EACR8B,gBAAgB,EAChB/E,KAAK,wCACLgF,SAAS,EACTC,cAAe,IAMnBvF,EAAAC,EAAAC,cAAA,OAAKsF,IAAI,QACPxF,EAAAC,EAAAC,cAACuF,EAAD,CAAgBxE,OAASnC,KAAKa,MAAM2D,eAAiBpC,OAASpC,KAAKuE,qBAChEG,EACCxD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOM,MAAM,WAAb,6CAAiET,EAAAC,EAAAC,cAAA,SAAKsD,GAAtE,KACA,KAEJxD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAAC2F,EAAD,CACExF,QAAQ,UACRC,KAAK,aACLC,MAAQoC,YAAgB3B,EAAMO,MAAMsC,QAAQnC,KAAKoE,MAAO,MACxDtF,MAAM,mBACNE,cAAc,UACdC,cAAc,MACdC,eAAe,OACfC,eAAiB0D,GAAYA,EAAS/B,IAAO+B,EAAS/B,IAAM,oBAIhExC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAAC2F,EAAD,CACExF,QAAQ,UACRC,KAAK,yBACLC,MAAQS,EAAMO,MAAMsC,QAAQnC,KAAKqE,aAAe,UAChDvF,MAAM,oBACNE,cAAc,UACdC,cAAgBK,EAAMO,MAAMsC,QAAQnC,KAAKqE,YACzCnF,eAAe,kBACfC,gBAAkBmF,OAAOvC,EAAIlC,MAAMwE,aAAe,KAAME,QAAQ,GAAK,YAIzEjG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAAC2F,EAAD,CACExF,QAAQ,cACRC,KAAK,6BACLC,MAAQ2D,EAAuB,IAC/B1D,MAAM,kBACNE,cAAgByD,EAChBxD,cAAgB,IAAMuD,EACtBtD,eAAe,WACfC,eAAiBkD,EAA0B,OAI/C/D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAAC2F,EAAD,CACExF,QAAQ,cACRC,KAAK,cACLC,MAAQ6D,EACR5D,MAAM,eACNE,cAAgBiE,EAChBhE,cAAgB,IAChBC,eAAe,aACfC,eAAiB6D,MAKvB1E,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,YACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,yBACxDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAWuD,EAASuC,WAAa,WAChDlG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,mBAKXnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,YACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,0BACxDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAWuD,EAASwC,SAAW,EAA9C,KACAnG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,sBAKXnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,YACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qCACxDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAWuD,EAASyC,WAAa,EAAhD,OACApG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,wBAKXnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuF,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB5F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,YACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,0BACxDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAYuD,EAAS0C,KAAO,EAAK1C,EAAS0C,IAAM,IAAM,QACrErG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,oBAOfnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAA,MAAD,CAAAI,GAAA,WACJnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoG,EAAD,CAAYzE,MAAQb,EAAMO,MAAMM,MAAQC,QAAUd,EAAMO,MAAMsC,QAAQnC,KAAK6E,kBAKnFvG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQM,MAAM,OAAO+F,QAAU1H,KAAKuE,oBAApC,qBAhLgBvC,aAkMTU,oBAZS,SAAA7B,GACtB,MAAO,CACL8G,WAAY9G,EAAM+G,SAASC,QAC3BlD,IAAK9D,EAAM+G,SAAShF,KACpB8B,SAAU7D,EAAM+G,SAAStB,MACzB1B,aAAc/D,EAAM8B,WAAWkF,QAC/B3F,MAAOrB,EAAM8B,WAAWC,KACxB6B,WAAY5D,EAAM8B,WAAW2D,MAC7BzB,SAAUhE,EAAMgE,WAILnC,CAAyB4B,GCtNzBA","file":"static/js/2.68c80b9c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Card,\n  CardBody,\n  Progress\n} from 'reactstrap';\n\nclass DashboardWidget extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      widgetClasses: 'd-inline-block text-muted text-truncate'\n    }\n\n  }\n\n  updateDimensions = () => { \n    const widgets = ReactDOM.findDOMNode(this).getElementsByClassName('widget');\n    const smallWidth = (widgets[0] && widgets[0].offsetWidth && widgets[0].offsetWidth <= 280) || false;\n    let widgetClasses = this.state.widgetClasses;\n\n    if (smallWidth) widgetClasses += ' small-width'\n    else widgetClasses = 'd-inline-block text-muted text-truncate';\n\n    this.setState({ widgetClasses: widgetClasses });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    return (\n      <Card className={this.props.bgColor}>\n        <CardBody className=\"widget\">\n          <div className=\"h1 text-muted float-right\"><i className={this.props.icon + ' text-gray'}></i></div>\n          <div className=\"h4 m-0\">{this.props.value}</div>\n          <div>{this.props.title}</div>\n          <Progress className=\"progress-xs my-3\" color={this.props.progressColor} value={this.props.progressValue} />\n          <small className={this.state.widgetClasses}>{this.props.secondaryTitle}: <b>{this.props.secondaryValue}</b></small>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default DashboardWidget;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Jumbotron,\n  Button,\n  CardBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from 'reactstrap';\n\nimport { Trans } from '@lingui/macro';\n\nclass ModalsRawStats extends Component {\n  \n\n  render() {\n    const { miner } = this.props\n\n    return (\n      <div>\n        <Modal isOpen={this.props.isOpen} toggle={this.props.toggle} className={this.props.className} size=\"lg\">\n          <ModalHeader className=\"bg-light\" toggle={this.props.toggle}>Miner raw stats</ModalHeader>\n          <ModalBody>\n            <div className=\"animated fadeIn\">\n              <Row>\n                <Col lg=\"12\">\n                  <Jumbotron>\n                    <pre>{JSON.stringify(miner.stats, null, 2) }</pre>\n                  </Jumbotron>\n                </Col>\n              </Row>\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  miner: state.minerStats.data\n})\n\nexport default connect(mapStateToProps)(ModalsRawStats);\n","import PoolsTable from './PoolsTable'\n\nexport default PoolsTable","import React, { Component } from 'react';\nimport {\n  Table,\n  Button,\n  Badge\n} from 'reactstrap';\n\nimport DisplayHashrate from '../../Filters/DisplayHashrate';\nimport moment from 'moment';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass PoolsTable extends Component {\n\n  render() {\n    const { pools, utility } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Table responsive className=\"table-outline d-none d-sm-table\">\n            <thead className=\"bg-light\">\n              <tr>\n                <th className=\"text-center\"><i className=\"fa fa-tasks\"></i></th>\n                <th><Trans>Url</Trans></th>\n                <th><Trans>Type</Trans></th>\n                <th><Trans>Status</Trans></th>\n                <th><Trans>Hashrate</Trans></th>\n                <th>Last share</th>\n                <th>Acc</th>\n                <th>Rej</th>\n                <th>Dis</th>\n                <th>Get</th>\n                <th><Trans>Username</Trans></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n              { pools.data.map(function(pool, index){\n                return <tr key={index}>\n                    <td className=\"text-center\">\n                      <Button><Trans>Select</Trans></Button>\n                    </td>\n                    <td>\n                      <div className=\"font-weight-bold text-muted\">{ pool.url }</div>\n                    </td>\n                    <td className=\"text-center\">\n                      <h5 className=\"mb-0\"><Badge color={ pool.stratumActive ? 'primary' : 'light' }>{ pool.stratumActive ? 'Main' : 'Failover' }</Badge></h5>\n                    </td>\n                    <td>\n                      <h5 className=\"mb-0\"><Badge color={ pool.status === 'Alive' ? 'success' : 'danger' }>{ pool.status }</Badge></h5>\n                    </td>\n                    <td className=\"text-center\">\n                    { (pool.stratumActive) ? \n                      <h6 className=\"mb-0 font-weight-bold\">\n                        <i className=\"fa fa-fire text-secondary\"></i> { DisplayHashrate(utility * 71582788, 'h') }\n                      </h6>\n                      :\n                      <span>Not active</span>\n                    }\n                    </td>\n                    <td>\n                      { pool.lastShareTime ? moment().to(moment(pool.lastShareTime, 'X')) : 'Never' }\n                    </td>\n                    <td>\n                      { pool.accepted }\n                    </td>\n                    <td>\n                      { pool.rejected }\n                    </td>\n                    <td>\n                      { pool.discarded }\n                    </td>\n                    <td>\n                      { pool.getworks }\n                    </td>\n                    <td>{ pool.user }</td>\n                  </tr>\n              })}\n            </tbody>\n          </Table>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default PoolsTable;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Row\n} from 'reactstrap';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { Loading, LoadingErrorBox } from '../Loading';\nimport DashboardWidget from '../Widgets/DashboardWidget';\nimport DisplayHashrate from '../Filters/DisplayHashrate';\nimport ModalsRawStats from '../Modals/ModalsRawStats';\nimport PoolsTable from '../Pools/PoolsTable';\n\nimport { Trans } from '@lingui/macro';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalsRawStats: false\n    }\n  }\n\n  openModalsRawStats = () => {\n    this.setState({\n      modalsRawStats: !this.state.modalsRawStats\n    });\n  }\n\n  render() {\n    const { minerError, mcuError, mcu, loadingMiner, miner, settings } = this.props;\n\n    // Miner shares\n    const minerTotalShares = (miner.stats.summary.data.hardwareErrors + miner.stats.summary.data.accepted + miner.stats.summary.data.rejected);\n    const minerpercentageRejected = Math.round(miner.stats.summary.data.rejected * 100 / minerTotalShares * 100) / 100\n    const minerpercentageError = Math.round(miner.stats.summary.data.hardwareErrors * 100 / minerTotalShares * 100) / 100\n    let errorsColor = 'success';\n    if (minerpercentageError >= 10 && minerpercentageError <= 20) errorsColor = 'warning';\n    else if (minerpercentageError > 20) errorsColor = 'danger';\n\n    // Miner uptime\n    const minerUptime = moment().to(moment().subtract(miner.stats.summary.data.elapsed, 'seconds'), true);\n\n    // Active pool\n    const mainPool = _.find(miner.stats.pools.data, { stratumActive: true });\n\n    // Last share\n    let lastShare = 'Not available',\n        lastShareTime = 0,\n        lastShareColor = 'success';\n    const timestamp = moment().format('X');\n    if (mainPool && mainPool.lastShareTime) {\n      lastShare = moment().to(moment(mainPool.lastShareTime, 'X'));\n      lastShareTime = mainPool.lastShareTime;\n    }\n    const diffLastShare = timestamp - lastShareTime;\n    if (diffLastShare >= 300 && diffLastShare <= 600) lastShareColor = 'warning';\n    else if (diffLastShare > 600) lastShareColor = 'danger'\n\n    if (minerError) {\n      return (\n        <LoadingErrorBox \n          show={true}\n          bg=\"bg-0\"\n          title=\"It seems there is a problem to communicate with the miner, check error message.\"\n          centerTitle={true}\n          subtitle=\"If problem persists, try to restart the miner, check the settings or try to reboot the system.\"\n          error={ minerError }\n          centerSubtitle={true}\n          icon=\"fa-exclamation-circle animated bounce\"\n          showBtn={false}\n          showProgress={ false }\n        />\n      )\n    }\n\n    return (\n      <div ref=\"main\">\n        <ModalsRawStats isOpen={ this.state.modalsRawStats } toggle={ this.openModalsRawStats }></ModalsRawStats>\n        { (mcuError) ?\n            <Alert color=\"warning\">There is a problem fetching system stats (<b>{ mcuError }</b>)</Alert>\n          : null \n        }\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-dark\" \n                icon=\"fa fa-fire\" \n                value={ DisplayHashrate(miner.stats.summary.data.mHSAv, 'mh') }\n                title=\"Current hashrate\"\n                progressColor=\"primary\"\n                progressValue=\"100\"\n                secondaryTitle=\"Pool\"\n                secondaryValue={(mainPool && mainPool.url) ? mainPool.url : 'Nothing active'}\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-info\" \n                icon=\"fa fa-thermometer-half\" \n                value={ miner.stats.summary.data.temperature || 0 + ' C°' }\n                title=\"Miner temperature\"\n                progressColor=\"success\"\n                progressValue={ miner.stats.summary.data.temperature }\n                secondaryTitle=\"MCU temperature\"\n                secondaryValue={ (Number(mcu.stats.temperature) / 1000).toFixed(2) + ' C°' }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-300\" \n                icon=\"fa fa-exclamation-triangle\" \n                value={ minerpercentageError + '%' }\n                title=\"Hardware errors\"\n                progressColor={ errorsColor }\n                progressValue={ 100 - minerpercentageError }\n                secondaryTitle=\"Rejected\"\n                secondaryValue={ minerpercentageRejected + '%' }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-200\" \n                icon=\"fa fa-clock\" \n                value={ minerUptime }\n                title=\"Miner uptime\"\n                progressColor={ lastShareColor }\n                progressValue={ 100 }\n                secondaryTitle=\"Last share\"\n                secondaryValue={ lastShare }\n              ></DashboardWidget>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-hdd text-gray\"></i></div>\n                  <div className=\"h4 m-0\">{ settings.minerMode || 'Not set' }</div>\n                  <div><Trans>Miner mode</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-bolt text-gray\"></i></div>\n                  <div className=\"h4 m-0\">{ settings.voltage || 0 }V</div>\n                  <div><Trans>Miner voltage</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-broadcast-tower text-gray\"></i></div>\n                  <div className=\"h4 m-0\">{ settings.frequency || 0 }MHz</div>\n                  <div><Trans>Miner frequency</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-wind text-gray\"></i></div>\n                  <div className=\"h4 m-0\">{ (settings.fan > -1) ? settings.fan + '%' : 'Auto' }</div>\n                  <div><Trans>Fan speed</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <h4><Trans>Pools</Trans></h4>\n              <div>\n                <PoolsTable pools={ miner.stats.pools } utility={ miner.stats.summary.data.workUtility }></PoolsTable>\n              </div>\n            </Col>\n          </Row>\n        </div>\n        <Button color=\"link\" onClick={ this.openModalsRawStats }>Raw stats</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loadingMcu: state.mcuStats.loading,\n    mcu: state.mcuStats.data,\n    mcuError: state.mcuStats.error,\n    loadingMiner: state.minerStats.loading,\n    miner: state.minerStats.data,\n    minerError: state.minerStats.error,\n    settings: state.settings\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","import Dashboard from './Dashboard'\n\nexport default Dashboard"],"sourceRoot":""}