{"version":3,"sources":["views/Pools/PoolsTable/index.js","views/Pools/PoolsTable/PoolsTable.js","views/HashboardsTable/index.js","views/HashboardsTable/HashboardsTable.js","views/Dashboard/Dashboard.js","views/Dashboard/index.js"],"names":["PoolsTable","miner","this","props","pools","_","map","stats","console","log","i18n","responsive","className","pool","i","host","port","color","intervals","int_0","sharesSent","displayHashrate","master","bySol","lastShareTime","moment","to","diff","sharesAccepted","sharesRejected","userName","Component","HashboardsTable","hashboard","uuid","slots","ghs","temperature","fans","rpm","wattPerGHs","toFixed","sum","currents","errorRate","chips","Dashboard","minerCheck","minerError","mcuError","mcu","settings","minerpercentageError","sumBy","o","errorsColor","minerUptime","subtract","upTime","mainPool","lastShare","lastShareColor","timestamp","format","diffLastShare","online","status","Loading","show","bg","title","centerTitle","subtitle","error","bfgminerLog","centerSubtitle","icon","showBtn","showProgress","ref","xs","md","xl","DashboardWidget","bgColor","value","progressColor","progressValue","secondaryTitle","secondaryValue","int_900","boardsW","powerColor","meanBy","lowDifficultyShares","minerModeIcon","minerMode","voltage","frequency","fan_low","fan_high","btnTo","btnText","connect","state","loadingMcu","mcuStats","loading","data","loadingMiner","minerStats","loadingOnline","minerOnline"],"mappings":"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","file":"static/js/6.3d19be14.chunk.js","sourcesContent":["import PoolsTable from './PoolsTable'\n\nexport default PoolsTable","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Table,\n  Badge\n} from 'reactstrap';\n\nimport { displayHashrate } from '../../Filters';\nimport moment from 'moment';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass PoolsTable extends Component {\n\n  render() {\n    const { miner } = this.props;\n    const pools = _.map(miner.stats, 'pool');\n    console.log('HELLO', pools)\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Table responsive className=\"table-outline d-table d-sm-table\">\n            <thead className=\"bg-light\">\n              <tr>\n                <th><Trans>Url</Trans></th>\n                <th><Trans>Active</Trans></th>\n                <th><Trans>Hashrate</Trans></th>\n                <th>Last share</th>\n                <th>Diff</th>\n                <th>Acc</th>\n                <th>Rej</th>\n                <th className=\"text-center\"><Trans>Username</Trans></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n              { pools.map((pool, i) => \n                <tr key={i}>\n                  <td>\n                    <div className=\"font-weight-bold text-muted\">{ `${pool.host}:${pool.port}` }</div>\n                  </td>\n                  <td className=\"\">\n                    <h5 className=\"mb-0\"><Badge color={ (pool.intervals.int_0.sharesSent > 0) ? 'success' : 'light' }>{ (pool.intervals.int_0.sharesSent > 0) ? 'Active' : 'Inactive' }</Badge></h5>\n                  </td>\n                  <td>\n                    <h6 className=\"mb-0 font-weight-bold\">\n                      <i className=\"fa fa-fire text-secondary\"></i> { displayHashrate(miner.stats[i].master.intervals.int_0.bySol, 'gh') }\n                    </h6>\n                  </td>\n                  <td>\n                    { pool.lastShareTime ? moment().to(moment(pool.lastShareTime, 'X')) : 'Never' }\n                  </td>\n                  <td>\n                    { pool.diff || 0 }\n                  </td>\n                  <td>\n                    { pool.intervals.int_0.sharesAccepted || 0 }\n                  </td>\n                  <td>\n                    { pool.intervals.int_0.sharesRejected || 0 }\n                  </td>\n                  <td className=\"text-center small\">{ pool.userName }</td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default PoolsTable;\n","import HashboardsTable from './HashboardsTable'\n\nexport default HashboardsTable","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Table,\n  Badge\n} from 'reactstrap';\n\nimport { displayHashrate } from '../Filters';\nimport moment from 'moment';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass HashboardsTable extends Component {\n\n  render() {\n    const { miner } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Table responsive className=\"table-outline d-table d-sm-table\">\n            <thead className=\"bg-light\">\n              <tr>\n                <th><Trans>ID</Trans></th>\n                <th><Trans>Status</Trans></th>\n                <th><Trans>Hashrate</Trans></th>\n                <th>Temp</th>\n                <th>Fan Speed</th>\n                <th>Power</th>\n                <th>Voltage</th>\n                <th>Error</th>\n                <th>Active ASICs</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n              { miner.stats.map((hashboard, i) => \n                <tr key={i}>\n                  <td>\n                    <div className=\"font-weight-bold text-muted\"><small>#</small>{hashboard.uuid}</div>\n                  </td>\n                  <td className=\"\">\n                    <h5 className=\"mb-0\"><Badge color={ (hashboard.pool.intervals.int_0.sharesSent > 0) ? 'success' : 'light' }>{ (hashboard.pool.intervals.int_0.sharesSent > 0) ? 'Active' : 'Inactive' }</Badge></h5>\n                  </td>\n                  <td>\n                    <h6 className=\"mb-0 font-weight-bold\">\n                      <i className=\"fa fa-fire text-secondary\"></i> { displayHashrate(hashboard.slots.int_0.ghs, 'gh') }\n                    </h6>\n                  </td>\n                  <td>\n                    { hashboard.slots.int_0.temperature }<small>°c</small>\n                  </td>\n                  <td>\n                    { hashboard.fans.int_0.rpm[0] } <small>rpm</small>\n                  </td>\n                  <td>\n                    { (hashboard.slots.int_0.wattPerGHs * hashboard.slots.int_0.ghs).toFixed(0) } <small>W</small>\n                  </td>\n                  <td>\n                    { (hashboard.slots.int_0.wattPerGHs * hashboard.slots.int_0.ghs / _.sum(hashboard.slots.int_0.currents)).toFixed(4) }\n                  </td>\n                  <td>\n                    { hashboard.slots.int_0.errorRate || 0 }<small>%</small>\n                  </td>\n                  <td>\n                    { hashboard.slots.int_0.chips }\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default HashboardsTable;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Col,\n  Row\n} from 'reactstrap';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { LoadingErrorBox } from '../Loading';\nimport DashboardWidget from '../Widgets/DashboardWidget';\nimport { convertTemp, displayHashrate, minerModeIcon, powerColor } from '../Filters';\nimport PoolsTable from '../Pools/PoolsTable';\nimport HashboardsTable from '../HashboardsTable';\n\nimport { Trans } from '@lingui/macro';\n\nclass Dashboard extends Component {\n\n  render() {\n    const { minerCheck, minerError, mcuError, mcu, miner, settings } = this.props;\n    \n    // Miner shares\n    const minerpercentageError = _.sumBy(miner.stats, function(o) { return o.master.intervals.int_0.errorRate; });\n    let errorsColor = 'success';\n    if (minerpercentageError >= 5 && minerpercentageError <= 7.5) errorsColor = 'warning';\n    else if (minerpercentageError > 7.5) errorsColor = 'danger';\n\n    // Miner uptime\n    const minerUptime = moment().to(moment().subtract(_.sumBy(miner.stats, function(o) { return o.master.upTime; }), 'seconds'), true);\n\n    // Active pool\n    const mainPool = miner.stats.pool;\n\n    // Last share\n    let lastShare = 'Not available',\n        lastShareTime = 0,\n        lastShareColor = 'success';\n    const timestamp = moment().format('X');\n    if (mainPool && mainPool.lastShareTime) {\n      lastShare = moment().to(moment(mainPool.lastShareTime, 'X'));\n      lastShareTime = mainPool.lastShareTime;\n    }\n    const diffLastShare = timestamp - lastShareTime;\n    if (diffLastShare >= 300 && diffLastShare <= 600) lastShareColor = 'warning';\n    else if (diffLastShare > 600) lastShareColor = 'danger'\n\n    if (!minerCheck.online.status) {\n      return (\n        <LoadingErrorBox \n          show={ true }\n          bg=\"bg-0\"\n          title=\"Miner is offline\"\n          centerTitle={ true }\n          subtitle=\"Try to start it\"\n          error={ false }\n          centerSubtitle={ true }\n          icon=\"fa-toggle-off animated bounce\"\n          showBtn={ true }\n          btnTo=\"/miner/start\"\n          btnText=\"Start\"\n        />\n      )\n    }\n\n    if (minerError) {\n      return (\n        <LoadingErrorBox \n          show={true}\n          bg=\"bg-0\"\n          title=\"It seems there is a problem to communicate with the miner, check error message.\"\n          centerTitle={true}\n          subtitle=\"Wait at least 1 minute, if problem persists, try to restart the miner, check the settings or try to reboot the system.\"\n          error={ minerError }\n          log={ mcu.stats.bfgminerLog }\n          centerSubtitle={true}\n          icon=\"fa-exclamation-circle animated bounce\"\n          showBtn={false}\n          showProgress={ false }\n        />\n      )\n    }\n\n    return (\n      <div ref=\"main\">\n        { (mcuError) ?\n            <Alert color=\"warning\">There is a problem fetching system stats (<b>{ mcuError }</b>)</Alert>\n          : null \n        }\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-dark\" \n                icon=\"fa fa-fire\" \n                value={ displayHashrate(_.sumBy(miner.stats, function(o) { return o.master.intervals.int_0.bySol; }), 'gh') }\n                title=\"Current hashrate\"\n                progressColor=\"primary\"\n                progressValue=\"100\"\n                secondaryTitle=\"15 Min Avg\"\n                secondaryValue={ displayHashrate(_.sumBy(miner.stats, function(o) { return o.master.intervals.int_900.bySol; }), 'gh') }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-info\" \n                icon=\"fa fa-thermometer-half\" \n                value={  `${_.sumBy(miner.stats, function(o) { return o.master.boardsW; })} Watt` }\n                title=\"Miner power usage\"\n                progressColor={ powerColor(_.meanBy(miner.stats, function(o) { return o.master.boardsW; })) }\n                progressValue={ _.meanBy(miner.stats, function(o) { return o.master.boardsW; }) * 100 / 300 }\n                secondaryTitle=\"Watts per TH/s\"\n                secondaryValue={ _.meanBy(miner.stats, function(o) { return o.master.wattPerGHs; }) * 1000 }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-300\" \n                icon=\"fa fa-exclamation-triangle\" \n                value={ minerpercentageError.toFixed(1) + '%' }\n                title=\"Hardware errors\"\n                progressColor={ errorsColor }\n                progressValue={ minerpercentageError * 10 }\n                secondaryTitle=\"Rejected\"\n                secondaryValue={ _.meanBy(miner.stats, function(o) { return o.pool.intervals.int_0.lowDifficultyShares; }) }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-200\" \n                icon=\"fa fa-clock\" \n                value={ minerUptime }\n                title=\"Miner uptime\"\n                progressColor={ lastShareColor }\n                progressValue={ 100 }\n                secondaryTitle=\"Last share\"\n                secondaryValue={ lastShare }\n              ></DashboardWidget>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <h4><Trans>Hashboards</Trans></h4>\n              <div>\n                <HashboardsTable miner={ miner }></HashboardsTable>\n              </div>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <h4><Trans>Pools</Trans></h4>\n              <div>\n                <PoolsTable miner={ miner }></PoolsTable>\n              </div>\n            </Col>\n          </Row>\n        </div>\n\n        <div>\n          <h4><Trans>Settings</Trans></h4>        \n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className={ minerModeIcon(settings.minerMode) + ' fa text-gray'}></i></div>\n                  <div className=\"h4 m-0 text-uppercase\">{ settings.minerMode || 'Not set' }</div>\n                  <div><Trans>Miner mode</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-bolt text-gray\"></i></div>\n                  <div className=\"h4 m-0\">\n                    { (settings.minerMode === 'custom') ?\n                      <span>{settings.voltage || 0 }<small className=\"textmuted\">%</small></span>\n                      : <span>Auto</span>\n                    }\n                  </div>\n                  <div><Trans>Miner voltage</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-broadcast-tower text-gray\"></i></div>\n                  <div className=\"h4 m-0\">\n                    { (settings.minerMode === 'custom') ?\n                      <span>{settings.frequency || 0 } <small className=\"textmuted\">MHz</small></span>\n                      : <span>Auto</span>\n                    }\n                  </div>\n                  <div><Trans>Miner frequency</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-wind text-gray\"></i></div>\n                  <div className=\"h4 m-0\">\n                    { (settings.fan_low !== 40 && settings.fan_high !== 60) ?\n                      <span>{ settings.fan_low }% / { settings.fan_high }%</span>\n                      : <span>Auto</span>\n                    }\n                  </div>\n                  <div><Trans>Fan speed</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loadingMcu: state.mcuStats.loading,\n    mcu: state.mcuStats.data,\n    mcuError: state.mcuStats.error,\n    loadingMiner: state.minerStats.loading,\n    miner: state.minerStats.data,\n    minerError: state.minerStats.error,\n    loadingOnline: state.minerOnline.loading,\n    minerCheck: state.minerOnline.data,\n    settings: state.settings\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","import Dashboard from './Dashboard'\n\nexport default Dashboard"],"sourceRoot":""}