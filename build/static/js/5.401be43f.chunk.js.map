{"version":3,"sources":["../node_modules/lodash/pick.js","../node_modules/lodash/_basePick.js","../node_modules/lodash/_basePickBy.js","../node_modules/lodash/_baseSet.js","views/Settings/SettingsMiner/SettingsMiner.js","views/Settings/SettingsWifi/SettingsWifi.js","views/Modals/ModalsRestore.js","views/Settings/SettingsGeneral/SettingsGeneral.js","views/Settings/Settings.js","views/Settings/index.js"],"names":["basePick","require","pick","flatRest","object","paths","module","exports","basePickBy","hasIn","value","path","baseGet","baseSet","castPath","predicate","index","length","result","assignValue","isIndex","isObject","toKey","customizer","lastIndex","nested","key","newValue","objValue","undefined","SettingsMiner","props","state","autoFan","fan_low","fan_high","marks","voltage","min","max","step","data","30","40","50","60","70","80","90","100","frequency","25","32","39","46","53","steps","onSelect","bind","onReset","onSwitch","option","onChange","this","name","mode","setState","minerMode","apiAllow","i18n","className","xl","form","lg","variant","label","color","checked","size","disabled","onClick","val","Component","SettingsWifi","handleScan","wifiScanMcu","handleClick","ssid","connected","handleConnect","event","wifiConnectMcu","passphrase","wifiPassword","preventDefault","handleDisconnect","wifiDisconnectMcu","evt","target","loadingWifiScan","loadingWifiConnect","loadingWifiDisconnect","wifiError","wifis","address","mcu","md","stats","activeWifi","pill","onSubmit","for","type","id","bsSize","Loading","href","map","wifi","percentColor","signal","connect","mcuWifiScan","loading","mcuWifiConnect","error","mcuWifiDisconnect","mcuStats","dispatch","ModalsRestore","content","backupError","handleRestore","handleClose","handleFileChosen","toggleRestoreModal","restoreConfiguration","backup","JSON","parse","err","settings","pools","file","reader","FileReader","onload","readAsText","show","isOpen","e","files","status","toggleRestoreModalAction","restoreConfigurationAction","SettingsGeneral","password","repeatPassword","passwordError","repeatPasswordError","handlePasswordChange","handleBackupConfiguration","handletoggleRestoreModal","changePassword","backupConfiguration","leftSidebarVisibility","leftSidebarExtended","rightSidebarVisibility","temperatureUnit","placeholder","flush","dataOn","dataOff","changePasswordAction","backupConfigurationAction","restartFields","Settings","handleSave","handleSaveAndRestart","save","saveAndRestart","customApproval","oldSettings","changed","isEqual","restartNeeded","saveSettings","saveSettingsAndRestartMiner"],"mappings":"yFAAA,IAAIA,EAAWC,EAAQ,KAoBnBC,EAnBWD,EAAQ,IAmBZE,EAAS,SAASC,EAAQC,GACnC,OAAiB,MAAVD,EAAiB,GAAKJ,EAASI,EAAQC,MAGhDC,EAAOC,QAAUL,G,oBCxBjB,IAAIM,EAAaP,EAAQ,KACrBQ,EAAQR,EAAQ,KAiBpBK,EAAOC,QANP,SAAkBH,EAAQC,GACxB,OAAOG,EAAWJ,EAAQC,GAAO,SAASK,EAAOC,GAC/C,OAAOF,EAAML,EAAQO,Q,oBCdzB,IAAIC,EAAUX,EAAQ,KAClBY,EAAUZ,EAAQ,KAClBa,EAAWb,EAAQ,KA2BvBK,EAAOC,QAhBP,SAAoBH,EAAQC,EAAOU,GAKjC,IAJA,IAAIC,GAAS,EACTC,EAASZ,EAAMY,OACfC,EAAS,KAEJF,EAAQC,GAAQ,CACvB,IAAIN,EAAON,EAAMW,GACbN,EAAQE,EAAQR,EAAQO,GAExBI,EAAUL,EAAOC,IACnBE,EAAQK,EAAQJ,EAASH,EAAMP,GAASM,GAG5C,OAAOQ,I,oBC1BT,IAAIC,EAAclB,EAAQ,KACtBa,EAAWb,EAAQ,KACnBmB,EAAUnB,EAAQ,KAClBoB,EAAWpB,EAAQ,IACnBqB,EAAQrB,EAAQ,KA8CpBK,EAAOC,QAlCP,SAAiBH,EAAQO,EAAMD,EAAOa,GACpC,IAAKF,EAASjB,GACZ,OAAOA,EAST,IALA,IAAIY,GAAS,EACTC,GAHJN,EAAOG,EAASH,EAAMP,IAGJa,OACdO,EAAYP,EAAS,EACrBQ,EAASrB,EAEI,MAAVqB,KAAoBT,EAAQC,GAAQ,CACzC,IAAIS,EAAMJ,EAAMX,EAAKK,IACjBW,EAAWjB,EAEf,GAAY,cAARgB,GAA+B,gBAARA,GAAiC,cAARA,EAClD,OAAOtB,EAGT,GAAIY,GAASQ,EAAW,CACtB,IAAII,EAAWH,EAAOC,QAELG,KADjBF,EAAWJ,EAAaA,EAAWK,EAAUF,EAAKD,QAAUI,KAE1DF,EAAWN,EAASO,GAChBA,EACCR,EAAQT,EAAKK,EAAQ,IAAM,GAAK,IAGzCG,EAAYM,EAAQC,EAAKC,GACzBF,EAASA,EAAOC,GAElB,OAAOtB,I,qMCgXM0B,E,kDAvYb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAA4B,KAAlBF,EAAMG,SAAqC,KAAnBH,EAAMI,WAAoB,GAG9D,EAAKC,MAAQ,CACXC,QAAS,CACPC,IAAK,GACLC,IAAK,IACLC,KAAM,GACNC,KAAM,CACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,IAAK,QAGTC,UAAW,CACTZ,IAAK,GACLC,IAAK,GACLC,KAAM,EACNC,KAAM,CACJU,GAAI,MACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJV,GAAI,QAGRX,QAAS,CACPI,IAAK,GACLC,IAAK,GACLiB,MAAO,EACPf,KAAM,CACJE,GAAI,MACJC,GAAI,UACJC,GAAI,UACJC,GAAI,QAGRX,SAAU,CACRG,IAAK,GACLC,IAAK,GACLiB,MAAO,EACPf,KAAM,CACJI,GAAI,MACJC,GAAI,UACJC,GAAI,UACJC,GAAI,SAKV,EAAKS,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBA9DC,E,2CAiEnB,SAAQG,GAAS,IAEbC,EACEC,KAAKhC,MADP+B,SAEa,YAAXD,GAAsBC,EAAS,CAAEE,KAAM,UAAWtD,MAAO,KAC9C,cAAXmD,GAAwBC,EAAS,CAAEE,KAAM,YAAatD,MAAO,O,sBAGnE,SAASuD,IAIPH,EADIC,KAAKhC,MADP+B,UAEO,CAAEE,KAAMC,EAAKD,KAAMtD,MAAOuD,EAAKvD,U,sBAG1C,SAASuD,GAAO,IAEZH,EACEC,KAAKhC,MADP+B,SAEFC,KAAKG,SAAL,eACGD,EAAKD,KAAOC,EAAKvD,QAEhBuD,EAAKvD,QACPoD,EAAS,CAAEE,KAAM,UAAWtD,MAAO,KACnCoD,EAAS,CAAEE,KAAM,WAAYtD,MAAO,Q,oBAIxC,WAAU,IAAD,SASHqD,KAAKhC,MAPPoC,EAFK,EAELA,UACA9B,EAHK,EAGLA,QACAH,EAJK,EAILA,QACAC,EALK,EAKLA,SACAe,EANK,EAMLA,UAEAY,GARK,EAOLM,SAPK,EAQLN,UAGF,OACE,cAAC,OAAD,UACG,cAAGO,KAAH,OACC,sBAAKC,UAAU,kBAAf,UACE,cAAC,IAAD,UAEE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WAAW,mBAAGD,UAAU,mBAAqB,cAAC,QAAD,iBAC7C,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,kDAEvC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAKE,MAAI,EAAT,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,sBAAKD,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,QAAdV,EACTW,KAAK,GACLhB,SAAU,kBAAM,EAAKL,SAAS,CAAE/C,MAAO,MAAOsD,KAAM,eACpDe,SAAwB,QAAdZ,IAEZ,+BACE,mBAAGG,UAAU,8CACb,cAAC,QAAD,kBAGJ,8BACE,mBAAGA,UAAU,cAAb,SAIE,cAAC,QAAD,0HAA6D,kCAKrE,cAAC,IAAD,CAAKG,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,sBAAKD,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,aAAdV,EACTW,KAAK,GACLhB,SAAU,kBAAM,EAAKL,SAAS,CAAE/C,MAAO,WAAYsD,KAAM,eACzDe,SAAwB,aAAdZ,IAEZ,+BACE,mBAAGG,UAAU,uDACb,cAAC,QAAD,uBAGJ,8BACE,mBAAGA,UAAU,cAAb,SAIE,cAAC,QAAD,2IAAwE,kCAKhF,cAAC,IAAD,CAAKG,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,sBAAKD,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAuB,UAAdV,EACTW,KAAK,GACLhB,SAAU,kBAAM,EAAKL,SAAS,CAAE/C,MAAO,QAASsD,KAAM,eACtDe,SAAwB,UAAdZ,IAEZ,+BACE,mBAAGG,UAAU,gDACb,cAAC,QAAD,oBAGJ,8BACE,mBAAGA,UAAU,cAAb,SAIE,cAAC,QAAD,+HAA+D,gDAYnF,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CACED,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,SACNC,QAAuB,WAAdV,EACTW,KAAK,GACLhB,SAAU,kBAAM,EAAKL,SAAS,CAAE/C,MAAO,SAAUsD,KAAM,eACvDe,SAAwB,WAAdZ,IAEZ,eAAC,IAAD,WAAW,mBAAGG,UAAU,yBAA2B,cAAC,QAAD,6BACnD,eAAC,IAAD,CAAcA,UAAU,aAAxB,UAAqC,mBAAGA,UAAU,yCAA2C,cAAC,QAAD,2BAE/F,eAAC,IAAD,WACE,qBAAKA,UAAU,OAAf,SACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,sQAIU,WAAdH,GAEA,cAAC,IAAD,UACE,eAAC,IAAD,CAAKK,MAAI,EAAT,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,qBAAKD,UAAU,WAAf,SACE,+BAAI,cAAC,QAAD,gBAAJ,IAA2B,8BAAIjC,EAAQ,sBAAMiC,UAAU,QAAhB,uBAEzC,gCACE,mBAAGA,UAAU,cAAb,SAIE,cAAC,QAAD,0FAAgD,cAAC,IAAD,CAAQM,MAAM,OAAOI,QAAS,kBAAM,EAAKrB,QAAQ,mBAEnG,cAAC,IAAD,CAAMW,UAAU,WAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEhC,IAAK,EAAKF,MAAMC,QAAQC,IACxBC,IAAK,EAAKH,MAAMC,QAAQE,IACxBH,MAAO,EAAKA,MAAMC,QAAQI,KAC1BD,KAAM,EAAKJ,MAAMC,QAAQG,KACzB9B,MAAO2B,EACPyB,SAAU,SAAAmB,GAAG,OAAInB,EAAS,CAAEpD,MAAOuE,EAAKjB,KAAM,2BAO1D,cAAC,IAAD,CAAKS,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,qBAAKD,UAAU,WAAf,SACE,+BAAI,cAAC,QAAD,kBAAJ,IAA6B,8BAAIpB,EAAU,sBAAMoB,UAAU,kBAE7D,gCACE,mBAAGA,UAAU,cAAb,SAIE,cAAC,QAAD,4FAAkD,cAAC,IAAD,CAAQM,MAAM,OAAOI,QAAS,kBAAM,EAAKrB,QAAQ,qBAErG,cAAC,IAAD,CAAMW,UAAU,WAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEhC,IAAK,EAAKF,MAAMc,UAAUZ,IAC1BC,IAAK,EAAKH,MAAMc,UAAUX,IAC1BH,MAAO,EAAKA,MAAMc,UAAUT,KAC5BD,KAAM,EAAKJ,MAAMc,UAAUV,KAC3B9B,MAAOwC,EACPY,SAAU,SAAAmB,GAAG,OAAInB,EAAS,CAAEpD,MAAOuE,EAAKjB,KAAM,4CAgBtE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKO,GAAG,KAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CACED,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAS,EAAK7C,MAAMC,QACpB6C,KAAK,GACLhB,SAAU,kBAAM,EAAKF,SAAS,CAAElD,OAAQ,EAAKsB,MAAMC,QAAS+B,KAAM,eAEpE,cAAC,IAAD,CAAOc,KAAK,KAAKF,MAAO,EAAK5C,MAAMC,QAAU,UAAY,WAAzD,SAAsE,EAAKD,MAAMC,QAAU,OAAS,WACpG,mBAAGqC,UAAU,yBAA2B,cAAC,QAAD,2BAE1C,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,sDAEvC,eAAC,IAAD,WACE,qBAAKA,UAAU,OAAf,SACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,sGAGF,EAAKtC,MAAMC,SACX,cAAC,IAAD,UACE,eAAC,IAAD,CAAKuC,MAAI,EAAT,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,qBAAKD,UAAU,WAAf,SACE,2DAA6B,8BAAIpC,EAAQ,sBAAMoC,UAAU,QAAhB,2BAE3C,gCACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,2DAEF,cAAC,IAAD,CAAMA,UAAU,WAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEhC,IAAK,EAAKF,MAAMF,QAAQI,IACxBC,IAAK,EAAKH,MAAMF,QAAQK,IACxBC,KAAM,EACNJ,MAAO,EAAKA,MAAMF,QAAQO,KAC1B/B,MAAOwB,EACP4B,SAAU,SAAAmB,GAAG,OAAInB,EAAS,CAAEpD,MAAOuE,EAAKjB,KAAM,2BAO1D,cAAC,IAAD,CAAKS,GAAI,GAAIF,GAAI,EAAjB,SACE,gCACE,qBAAKD,UAAU,WAAf,SACE,gEAAkC,8BAAInC,EAAS,sBAAMmC,UAAU,QAAhB,2BAEjD,gCACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,0EAEF,cAAC,IAAD,CAAMA,UAAU,WAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEhC,IAAK,EAAKF,MAAMD,SAASG,IACzBC,IAAK,EAAKH,MAAMD,SAASI,IACzBC,KAAM,EACNJ,MAAO,EAAKA,MAAMD,SAASM,KAC3B/B,MAAOyB,EACP2B,SAAU,SAAAmB,GAAG,OAAInB,EAAS,CAAEpD,MAAOuE,EAAKjB,KAAM,qD,GAnXxDkB,a,wBCMtBC,E,kDACJ,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IASRqD,WAAa,YAGXC,EAFwB,EAAKtD,MAArBsD,gBAXS,EAgBnBC,YAAc,SAACC,GACb,EAAKrB,SAAS,CACZqB,KAAMA,EACNC,UAAW,QAnBI,EAuBnBC,cAAgB,SAACC,GAAW,IAClBC,EAAmB,EAAK5D,MAAxB4D,eACR,EAAKzB,SAAS,CAAEsB,WAAW,IAE3BG,EAAe,CAAEJ,KAAM,EAAKvD,MAAMuD,KAAMK,WAAY,EAAK5D,MAAM6D,eAE/DH,EAAMI,kBA7BW,EAgCnBC,iBAAmB,WAAO,IAChBC,EAAsB,EAAKjE,MAA3BiE,kBACR,EAAK9B,SAAS,CACZqB,KAAM,KACNC,WAAW,IAGbQ,KAvCiB,EA0CnBlC,SAAW,SAACmC,GACV,EAAK/B,SAAL,eACG+B,EAAIC,OAAOlC,KAAOiC,EAAIC,OAAOxF,SAzChC,EAAKsB,MAAQ,CACXuD,KAAM,KACNM,aAAc,GACdL,UAAW,MANI,E,0CAgDnB,WAAU,IAAD,SACgGzB,KAAKhC,MAApGoE,EADD,EACCA,gBAAiBC,EADlB,EACkBA,mBAAoBC,EADtC,EACsCA,sBAAuBC,EAD7D,EAC6DA,UAAWC,EADxE,EACwEA,MAAOC,EAD/E,EAC+EA,QAASC,EADxF,EACwFA,IADxF,EAGmC1C,KAAK/B,MAAvC6D,EAHD,EAGCA,aAAcN,EAHf,EAGeA,KAAMC,EAHrB,EAGqBA,UAE5B,OACE,cAAC,OAAD,UACG,cAAGnB,KAAH,OACC,qBAAKC,UAAU,kBAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKG,GAAG,KAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,mBAAGH,UAAU,oBAAsB,cAAC,QAAD,gBAErC,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,6EAEvC,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKoC,GAAI,EAAT,SACE,8BACE,sBAAKpC,UAAU,WAAf,UACE,+BACKmC,EAAIE,MAAMC,YAAiB,sBAAKtC,UAAU,gBAAf,UAA+B,uBAAOA,UAAU,aAAjB,yBAA/B,IAAiF,cAAC,IAAD,CAAOM,MAAM,UAAUiC,MAAI,EAA3B,SAA8BJ,EAAIE,MAAMC,gBACvJ,sBAAKtC,UAAYmC,EAAIE,MAAMC,WAAa,WAAa,iBAArD,UACKH,EAAIE,MAAMC,YAAiB,cAAC,IAAD,CAC5BtC,UAAU,iCACVM,MAAO,UACPE,KAAK,KACLC,SAAWsB,EACXrB,QAAU,EAAKe,iBALa,SAM7B,cAAC,QAAD,qBACD,cAAC,IAAD,CACEzB,UAAU,iCACVM,MAAO,UACPE,KAAK,KACLC,SAAWsB,EACXrB,QAAU,EAAKI,WALjB,SAMC,cAAC,QAAD,qBAGL,qBAAKd,UAAU,OAAf,SACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,0SAGDiB,IAASC,EACV,cAAC,IAAD,CAAMsB,SAAU,EAAKrB,cAAenB,UAAU,OAA9C,SACE,eAAC,IAAD,CAAKE,MAAI,EAAT,UACE,cAAC,IAAD,CAAKkC,GAAI,GAAT,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOK,IAAI,eAAX,SAA0B,cAAC,QAAD,0CAAiBxB,QAAjB,YAAY,2BACtC,cAAC,IAAD,CACEyB,KAAK,WACLhD,KAAK,eACLiD,GAAG,eACHvG,MAAQmF,EACR/B,SAAW,EAAKA,SAChBoD,OAAO,YAIb,cAAC,IAAD,CAAKR,GAAI,GAAT,SACE,cAAC,IAAD,CAAQpC,UAAU,sBAAsBM,MAAM,UAAUE,KAAK,KAAKE,QAAU,EAAKS,cAAjF,SAAiG,cAAC,QAAD,yBAIrG,KAEFD,GACA,qBAAKlB,UAAU,kBAAf,SACK8B,EACD,cAACe,EAAA,EAAD,IAECb,EACC,eAAC,IAAD,CAAO1B,MAAM,UAAb,2FAAqG,4BAAK0B,OACxG,eAAC,IAAD,CAAO1B,MAAM,UAAb,oDAA8D,4BAAKW,IAAnE,2BAAqG,mBAAG6B,KAAM,UAAYZ,EAASlC,UAAU,mBAAxC,SAA6DkC,IAAlK,wDAOhB,cAAC,IAAD,CAAKE,GAAI,EAAT,SACE,gCACE,qBAAKpC,UAAU,WAAf,SACE,+BAAI,mBAAGA,UAAU,8CAAgD,cAAC,QAAD,2BAElE6B,GAAmBE,EACpB,cAACc,EAAA,EAAD,IAEIZ,GAAUA,EAAMtF,OAOhB,cAAC,IAAD,UACIsF,EAAMc,KAAI,SAACC,EAAMtG,GACjB,OAAO,eAAC,IAAD,CAA6BsD,UAAU,WAAvC,UACL,cAAC,IAAD,CAAQM,MAAM,OAAON,UAAU,MAAMU,QAAS,WAAQ,EAAKM,YAAYgC,EAAK/B,OAA5E,SAAwF+B,EAAK/B,OAC7F,cAAC,IAAD,CAAUjB,UAAU,cAAcM,MAAQ2C,YAAaD,EAAKE,OAAQ,WAAa9G,MAAQ4G,EAAKE,SAC9F,wBAAOlD,UAAU,aAAjB,oBAAqC,8BAAKgD,EAAKE,OAAV,YAHXxG,QARhC,qBAAKsD,UAAU,GAAf,SACE,mBAAGA,UAAU,cAAb,SACE,cAAC,QAAD,8H,GAhJPY,aAsMZuC,qBA1BS,SAAAzF,GACtB,MAAO,CACLuE,MAAOvE,EAAM0F,YAAYjF,KACzB0D,gBAAiBnE,EAAM0F,YAAYC,QACnCnB,QAASxE,EAAM4F,eAAenF,KAC9B6D,UAAWtE,EAAM4F,eAAeC,MAChCzB,mBAAoBpE,EAAM4F,eAAeD,QACzCtB,sBAAuBrE,EAAM8F,kBAAkBH,QAC/ClB,IAAKzE,EAAM+F,SAAStF,SAIG,SAACuF,GAC1B,MAAO,CACL3C,YAAa,WACX2C,EAAS3C,gBAEXM,eAAgB,YAA2B,IAAxBJ,EAAuB,EAAvBA,KAAMK,EAAiB,EAAjBA,WACvBoC,EAASrC,YAAe,CAAEJ,OAAMK,iBAElCI,kBAAmB,WACjBgC,EAAShC,mBAKAyB,CAA6CtC,G,SChNtD8C,E,kDACJ,WAAYlG,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXkG,QAAS,GACTC,YAAa,IAGf,EAAKrE,SAAW,EAAKA,SAASJ,KAAd,gBAChB,EAAK0E,cAAgB,EAAKA,cAAc1E,KAAnB,gBACrB,EAAK2E,YAAc,EAAKA,YAAY3E,KAAjB,gBACnB,EAAK4E,iBAAmB,EAAKA,iBAAiB5E,KAAtB,gBAVP,E,4CAanB,SAASgC,GACP3B,KAAKG,SAAL,eACGwB,EAAMQ,OAAOlC,KAAO0B,EAAMQ,OAAOxF,U,2BAItC,WAAiB,IAEbwH,EACEnE,KAAK/B,MADPkG,QAFY,EAQVnE,KAAKhC,MAFPwG,EANY,EAMZA,mBACAC,EAPY,EAOZA,qBAGF,GAAKN,EAAL,CAOA,IAAIO,EAAS,GAEb,IACEA,EAASC,KAAKC,MAAMT,GACpB,MAAOU,GAIP,YAHA7E,KAAKG,SAAS,CACZiE,YAAa,wBAKZM,EAAOI,UAAaJ,EAAOK,OAOhCN,EAAqBC,GACrBF,GAAmB,IAPjBxE,KAAKG,SAAS,CACZiE,YAAa,6BAnBfpE,KAAKG,SAAS,CACZiE,YAAa,+B,yBA2BnB,YAOEI,EAJIxE,KAAKhC,MADPwG,qBAKiB,K,8BAGrB,SAAiBQ,GAAO,IAAD,OACfC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACjD,GACf,EAAK/B,SAAS,CACZgE,QAASjC,EAAIC,OAAOhF,UAGxB8H,EAAOG,WAAWJ,K,oBAGpB,WAAU,IAAD,SAIHhF,KAAKhC,MAFPqH,EAFK,EAELA,KACA9E,EAHK,EAGLA,UAIA6D,EACEpE,KAAK/B,MADPmG,YAGF,OACE,8BACE,eAAC,IAAD,CAAOkB,OAAQD,EAAM9E,UAAWA,EAAWQ,KAAK,KAAhD,UACE,cAAC,IAAD,CAAaR,UAAU,WAAvB,0CACA,cAAC,IAAD,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKG,GAAG,KAAR,SACE,cAAC,IAAD,CAAMH,UAAU,WAAhB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAWA,UAAU,OAArB,UACE,cAAC,IAAD,CACE0C,KAAK,OACLhD,KAAK,SACLiD,GAAG,SACHC,OAAO,KACPpD,SAAU,SAAAwF,GAAC,OAAI,EAAKhB,iBAAiBgB,EAAEpD,OAAOqD,MAAM,OAEtD,sBAAMjF,UAAU,cAAhB,SACG6D,mBASjB,eAAC,IAAD,WACE,cAAC,IAAD,CAAQnD,QAASjB,KAAKsE,YAAtB,mBACA,cAAC,IAAD,CAAQzD,MAAM,UAAUI,QAASjB,KAAKqE,cAAtC,iC,GAvHgBlD,aA4IbuC,qBAbS,SAAAzF,GAAK,MAAK,CAChCoH,KAAMpH,EAAMyG,OAAOe,WAGM,SAAAxB,GAAQ,MAAK,CACtCO,mBAAoB,SAACiB,GACnBxB,EAASyB,YAAyB,CAAED,aAEtChB,qBAAsB,SAACC,GACrBT,EAAS0B,YAA2B,CAAEjB,gBAI3BhB,CAA6CQ,G,QClItD0B,E,kDACJ,WAAY5H,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACX4H,SAAU,GACVC,eAAgB,GAChBC,cAAe,GACfC,oBAAqB,IAGvB,EAAKC,qBAAuB,EAAKA,qBAAqBtG,KAA1B,gBAC5B,EAAKI,SAAW,EAAKA,SAASJ,KAAd,gBAChB,EAAKuG,0BAA4B,EAAKA,0BAA0BvG,KAA/B,gBACjC,EAAKwG,yBAA2B,EAAKA,yBAAyBxG,KAA9B,gBAbf,E,4CAgBnB,SAASuC,GACPlC,KAAKG,SAAL,eACG+B,EAAIC,OAAOlC,KAAOiC,EAAIC,OAAOxF,U,kCAIlC,WAAwB,IAAD,EAIjBqD,KAAK/B,MAFP4H,EAFmB,EAEnBA,SACAC,EAHmB,EAGnBA,eAIAM,EACEpG,KAAKhC,MADPoI,eAGGP,EAODA,IAAaC,EAQjBM,EAAeP,GAPb7F,KAAKG,SAAS,CACZ4F,cAAe,0BACfC,oBAAqB,4BATvBhG,KAAKG,SAAS,CACZ4F,cAAe,4B,uCAgBrB,YAKEM,EAFIrG,KAAKhC,MADPqI,yB,sCAMJ,YAKE7B,EAFIxE,KAAKhC,MADPwG,qBAGiB,K,oBAGrB,WAAU,IAAD,SAOHxE,KAAKhC,MALPsI,EAFK,EAELA,sBACAC,EAHK,EAGLA,oBACAC,EAJK,EAILA,uBACAC,EALK,EAKLA,gBACA1G,EANK,EAMLA,SANK,EAcHC,KAAK/B,MAJP4H,EAVK,EAULA,SACAC,EAXK,EAWLA,eACAC,EAZK,EAYLA,cACAC,EAbK,EAaLA,oBAGF,OACE,cAAC,OAAD,UACG,cAAG1F,KAAH,OACC,sBAAKC,UAAU,kBAAf,UACE,eAAC,IAAD,WAEE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WAAW,mBAAGA,UAAU,mBAAqB,cAAC,QAAD,sCAC7C,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,yDAEvC,eAAC,IAAD,WACE,mBAAGA,UAAU,kCAAb,SACE,cAAC,QAAD,6GAEF,cAAC,IAAD,UACE,eAAC,IAAD,CAAKE,MAAI,EAAT,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIF,GAAI,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwC,IAAI,WAAX,SAAsB,cAAC,QAAD,mBACtB,cAAC,IAAD,CACEC,KAAK,WACLhD,KAAK,WACLiD,GAAG,WACHC,OAAO,KACPxG,MAAOkJ,EACP9F,SAAU,EAAKA,WAEjB,sBAAMQ,UAAU,cAAhB,SACGwF,SAIP,cAAC,IAAD,CAAKrF,GAAI,GAAIF,GAAI,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwC,IAAI,iBAAX,SAA4B,cAAC,QAAD,0BAC5B,cAAC,IAAD,CACEC,KAAK,WACLhD,KAAK,iBACLiD,GAAG,iBACHwD,YAAY,GACZvD,OAAO,KACPxG,MAAOmJ,EACP/F,SAAU,EAAKA,WAEjB,sBAAMQ,UAAU,cAAhB,SACGyF,SAIP,cAAC,IAAD,CAAKrD,GAAI,GAAT,SACE,cAAC,IAAD,CAAQpC,UAAU,sBAAsBM,MAAM,UAAUE,KAAK,KAAKE,QAAS,EAAKgF,qBAAhF,SAAsG,cAAC,QAAD,8BAQhH,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WAAW,mBAAG1F,UAAU,yBAA2B,cAAC,QAAD,0BACnD,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,sDAEvC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAI,GAAT,SACE,eAAC,IAAD,CAAWmG,OAAK,EAAhB,UACE,eAAC,IAAD,WACE,sBAAKpG,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAASwF,EACTvF,KAAK,GACLhB,SAAU,kBAAMA,EAAS,CAAEE,KAAM,wBAAyBtD,OAAQ2J,OAEpE,8BAAK,cAAC,QAAD,qCAEP,qBAAK/F,UAAU,wBAAf,SAAuC,cAAC,QAAD,iDAEzC,eAAC,IAAD,WACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAASyF,EACTxF,KAAK,GACLhB,SAAU,kBAAMA,EAAS,CAAEE,KAAM,sBAAuBtD,OAAQ4J,OAElE,8BAAK,cAAC,QAAD,8BAEP,qBAAKhG,UAAU,wBAAf,SAAuC,cAAC,QAAD,sDAEzC,eAAC,IAAD,WACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRiG,OAAO,QACPC,QAAQ,QACRjG,OAAK,EACLC,MAAM,UACNC,QAA6B,MAApB2F,EACT1F,KAAK,GACLhB,SAAU,kBAAMA,EAAS,CAAEE,KAAM,kBAAmBtD,MAA2B,MAApB8J,EAA0B,IAAM,SAE7F,8BAAK,cAAC,QAAD,8BAEP,qBAAKlG,UAAU,wBAAf,SAAuC,cAAC,QAAD,6CAEzC,eAAC,IAAD,WACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CACEA,UAAU,kBACVI,QAAQ,OACRC,OAAK,EACLC,MAAM,UACNC,QAAS0F,EACTzF,KAAK,GACLhB,SAAU,kBAAMA,EAAS,CAAEE,KAAM,yBAA0BtD,OAAQ6J,OAErE,8BAAK,cAAC,QAAD,sCAEP,qBAAKjG,UAAU,wBAAf,SAAuC,cAAC,QAAD,gEAUrD,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,WAAW,mBAAGA,UAAU,oBAAsB,cAAC,QAAD,0BAC9C,cAAC,IAAD,CAAcA,UAAU,aAAxB,SAAqC,cAAC,QAAD,wEAEvC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKE,MAAI,EAAT,SACE,cAAC,IAAD,CAAKkC,GAAI,GAAT,SACE,eAAC,IAAD,CAAWgE,OAAK,EAAhB,UACE,cAAC,IAAD,UACE,sBAAKpG,UAAU,GAAf,UACE,cAAC,IAAD,CAAQA,UAAU,sBAAsBM,MAAM,UAAUE,KAAK,KAAKE,QAAS,EAAKiF,0BAAhF,SAA2G,cAAC,QAAD,iBAC3G,qBAAK3F,UAAU,wBAAf,SAAuC,cAAC,QAAD,iFAG3C,cAAC,IAAD,UACE,sBAAKA,UAAU,GAAf,UACE,cAAC,IAAD,CAAQA,UAAU,sBAAsBM,MAAM,UAAUE,KAAK,KAAKE,QAAS,EAAKkF,yBAAhF,SAA0G,cAAC,QAAD,kBAC1G,qBAAK5F,UAAU,wBAAf,SAAuC,cAAC,QAAD,8EAWzD,cAAC,EAAD,c,GA5PkBY,aAgRfuC,oBAAQ,MAZI,SAAAO,GAAQ,MAAK,CACtCmC,eAAgB,SAACP,GACf5B,EAAS6C,YAAqB,CAAEjB,eAElCQ,oBAAqB,WACnBpC,EAAS8C,gBAEXvC,mBAAoB,SAACiB,GACnBxB,EAASyB,YAAyB,CAAED,gBAIzB/B,CAAkCkC,G,QCzR3CoB,EAAgB,CACpB,YACA,YACA,YAGIC,E,kDACJ,WAAYjJ,GAAQ,IAAD,0BAIf8G,GAHF,cAAM9G,IAIGA,MADP8G,SAJe,OAOjB,EAAK7G,MAAQ,CACX6G,SAAS,eAAMA,IAGjB,EAAK/E,SAAW,EAAKA,SAASJ,KAAd,gBAChB,EAAKuH,WAAa,EAAKA,WAAWvH,KAAhB,gBAClB,EAAKwH,qBAAuB,EAAKA,qBAAqBxH,KAA1B,gBAbX,E,4CAgBnB,YAA2B,IAAhBM,EAAe,EAAfA,KAAMtD,EAAS,EAATA,MACfqD,KAAKG,UAAS,SAAAlC,GAAK,MAAK,CACtB6G,SAAS,2BACJ7G,EAAM6G,UADH,kBAEL7E,EAAOtD,U,wBAKd,YAIEyK,EAHiBpH,KAAKhC,MAAdoJ,MACapH,KAAK/B,MAAlB6G,Y,kCAKV,YAIEuC,EAH2BrH,KAAKhC,MAAxBqJ,gBACarH,KAAK/B,MAAlB6G,Y,oBAKV,WAAU,IAAD,EAgBH9E,KAAK/B,MAhBF,IAEL6G,SACE1E,EAHG,EAGHA,UACA9B,EAJG,EAIHA,QACAa,EALG,EAKHA,UACAhB,EANG,EAMHA,QACAC,EAPG,EAOHA,SACAkJ,EARG,EAQHA,eACAjH,EATG,EASHA,SACAiG,EAVG,EAUHA,sBACAC,EAXG,EAWHA,oBACAC,EAZG,EAYHA,uBACAC,EAbG,EAaHA,gBAEF3B,EAfK,EAeLA,SAGMyC,EAAgBvH,KAAKhC,MAArBuJ,YAEFC,GAAWC,IAAQ3C,EAAUyC,GAC7BG,GAAiBD,IAAQtL,IAAK2I,EAAUkC,GAAgB7K,IAAKoL,EAAaP,IAChF,OACE,sBAAKzG,UAAU,kBAAf,UACIiH,GACF,cAAC,IAAD,UACE,cAAC,IAAD,CAAK9G,GAAG,KAAR,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAYH,UAAU,UAAtB,WACKmH,GACD,cAAC,IAAD,CACE3G,KAAK,KACLR,UAAU,kCACVS,UAAWwG,EACXvG,QAASjB,KAAKkH,WAJhB,SAME,cAAC,QAAD,eAGFQ,GACA,cAAC,IAAD,CACE3G,KAAK,KACLR,UAAU,6BACVU,QAASjB,KAAKmH,qBAHhB,SAKE,cAAC,QAAD,yBAGFO,GAAiB,sBAAMnH,UAAU,OAAhB,SAAuB,cAAC,QAAD,4DACvCmH,GAAiBF,GAAW,sBAAMjH,UAAU,OAAhB,SAAuB,cAAC,QAAD,+FAQ9D,cAAC,EAAD,CAEIH,YAAW9B,UAASa,YAAWhB,UAASC,WAAUkJ,iBAAgBjH,WAEpEN,SAAUC,KAAKD,WAKjB,cAAC,EAAD,IAGA,cAAC,EAAD,CAEIuG,wBAAuBC,sBAAqBC,yBAAwBC,kBAEtE1G,SAAUC,KAAKD,WAGjB,6B,GApHeoB,aAwIRuC,qBAdS,SAAAzF,GAAK,MAAK,CAChC6G,SAAU7G,EAAM6G,SAChByC,YAAatJ,EAAM6G,aAGM,SAAAb,GAAQ,MAAK,CACtCmD,KAAM,SAACtC,GACLb,EAAS0D,YAAa7C,KAExBuC,eAAgB,SAACvC,GACfb,EAAS2D,YAA4B9C,QAI1BpB,CAA6CuD,GChK7CA","file":"static/js/5.401be43f.chunk.js","sourcesContent":["var basePick = require('./_basePick'),\n    flatRest = require('./_flatRest');\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n","var basePickBy = require('./_basePickBy'),\n    hasIn = require('./hasIn');\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n","var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","import React, { Component } from 'react';\nimport { AppSwitch } from '@coreui/react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n  ListGroup,\n  ListGroupItem\n} from 'reactstrap';\n\nimport 'rc-slider/assets/index.css';\nimport Slider from 'rc-slider';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\n\nclass SettingsMiner extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      autoFan: (props.fan_low === 40 && props.fan_high === 60) || false\n    };\n\n    this.marks = {\n      voltage: {\n        min: 30,\n        max: 100,\n        step: 10,\n        data: {\n          30: 'Min',\n          40: '40%',\n          50: '50%',\n          60: '60%',\n          70: '70%',\n          80: '80%',\n          90: '90%',\n          100: 'Max'\n        }\n      },\n      frequency: {\n        min: 25,\n        max: 60,\n        step: 1,\n        data: {\n          25: 'Min',\n          32: '32',\n          39: '39',\n          46: '46',\n          53: '53',\n          60: 'Max'\n        }\n      },\n      fan_low: {\n        min: 40,\n        max: 70,\n        steps: 5,\n        data: {\n          40: 'Min',\n          50: '50°c',\n          60: '60°c',\n          70: 'Max',\n        }\n      },\n      fan_high: {\n        min: 60,\n        max: 90,\n        steps: 5,\n        data: {\n          60: 'Min',\n          70: '70°c',\n          80: '80°c',\n          90: 'Max',\n        }\n      }\n    };\n\n    this.onSelect = this.onSelect.bind(this);\n    this.onReset = this.onReset.bind(this);\n    this.onSwitch = this.onSwitch.bind(this);\n  }\n\n  onReset(option) {\n    const {\n      onChange,\n    } = this.props;\n    if (option === 'voltage') onChange({ name: 'voltage', value: 30});\n    if (option === 'frequency') onChange({ name: 'frequency', value: 25});\n  }\n\n  onSelect(mode) {\n    const {\n      onChange,\n    } = this.props;\n    onChange({ name: mode.name, value: mode.value });\n  }\n\n  onSwitch(mode) {\n    const {\n      onChange,\n    } = this.props;\n    this.setState({\n      [mode.name]: mode.value,\n    });\n    if (mode.value) {\n      onChange({ name: 'fan_low', value: 40});\n      onChange({ name: 'fan_high', value: 60});\n    }\n  }\n\n  render() {\n    const {\n      minerMode,\n      voltage,\n      fan_low,\n      fan_high,\n      frequency,\n      apiAllow,\n      onChange\n    } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              { /* Miner */ }\n              <Col xl=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle><i className=\"fa fa-hdd mr-2\"></i><Trans>Miner</Trans></CardTitle>\n                    <CardSubtitle className=\"text-muted\"><Trans>Manage miner specific configurations</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Form>\n                      <Row form>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={minerMode === 'eco'}\n                                size=\"\"\n                                onChange={() => this.onSelect({ value: 'eco', name: 'minerMode' })}\n                                disabled={minerMode === 'eco'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-leaf mr-2 initialism text-secondary\" />\n                                <Trans>ECO</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>In ECO mode your miner will consume less power (about <b>1.0W/MHs</b>) but its hashrate will be slower.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"primary\"\n                                checked={minerMode === 'balanced'}\n                                size=\"\"\n                                onChange={() => this.onSelect({ value: 'balanced', name: 'minerMode' })}\n                                disabled={minerMode === 'balanced'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-balance-scale mr-2 initialism text-secondary\" />\n                                <Trans>BALANCED</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>In BALANCED mode your miner will consume a bit more power (about <b>1.2W/MHs</b>) and its hashrate will be a bit faster.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                        <Col lg={12} xl={4}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"warning\"\n                                checked={minerMode === 'turbo'}\n                                size=\"\"\n                                onChange={() => this.onSelect({ value: 'turbo', name: 'minerMode' })}\n                                disabled={minerMode === 'turbo'}\n                              />\n                              <h4>\n                                <i className=\"fa fa-rocket mr-2 initialism text-secondary\" />\n                                <Trans>TURBO</Trans>\n                              </h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>In Turbo mode your miner will consume more power (about <b>1.4W/MHs</b>) and so its hashrate will be faster.</Trans>\n                              </p>\n                            </div>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n            \n            <Row>\n              <Col xl=\"12\">\n                <Card>\n                  <CardHeader>\n                    <AppSwitch\n                      className=\"float-left mr-2\"\n                      variant=\"pill\"\n                      label\n                      color=\"danger\"\n                      checked={minerMode === 'custom'}\n                      size=\"\"\n                      onChange={() => this.onSelect({ value: 'custom', name: 'minerMode' })}\n                      disabled={minerMode === 'custom'}\n                    />\n                    <CardTitle><i className=\"fa fa-diagnoses mr-2\"></i><Trans>Miner custom mode</Trans></CardTitle>\n                    <CardSubtitle className=\"text-muted\"><i className=\"fa fa-exclamation-triangle mr-2 mt-2\"></i><Trans>DANGER zone!</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <div className=\"lead\">\n                      <p className=\"text-muted \">\n                        <Trans>The Apollo comes with tuned preset values (look above) which offer a good range of operating modes, by selecting custom you risk damaging your device and FutureBit will not be responsible for any or all damage caused by over-clocking or over-volting</Trans>\n                      </p>\n                    </div>\n                    {\n                    minerMode === 'custom'\n                    && (\n                    <Form>\n                      <Row form>\n                        <Col lg={12} xl={6}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <h4><Trans>Voltage</Trans> <b>{voltage}<span className=\"small\">%</span></b></h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>You can set your miner custom voltage or <Button color=\"link\" onClick={() => this.onReset('voltage')}>reset</Button> to default value.</Trans>\n                              </p>\n                              <Card className=\"border-0\">\n                                <CardBody>\n                                  <Slider\n                                    min={this.marks.voltage.min}\n                                    max={this.marks.voltage.max}\n                                    marks={this.marks.voltage.data}\n                                    step={this.marks.voltage.step}\n                                    value={voltage}\n                                    onChange={val => onChange({ value: val, name: 'voltage' })}\n                                  />\n                                </CardBody>\n                              </Card>\n                            </div>\n                          </div>\n                        </Col>\n                        <Col lg={12} xl={6}>\n                          <div>\n                            <div className=\"clearfix\">\n                              <h4><Trans>Frequency</Trans> <b>{frequency}<span className=\"small\"></span></b></h4>\n                            </div>\n                            <div>\n                              <p className=\"text-muted \">\n                                { \n                                // eslint-disable-next-line \n                                }\n                                <Trans>You can set your miner custom frequency or <Button color=\"link\" onClick={() => this.onReset('frequency')}>reset</Button> to default value.</Trans>\n                              </p>\n                              <Card className=\"border-0\">\n                                <CardBody>\n                                  <Slider\n                                    min={this.marks.frequency.min}\n                                    max={this.marks.frequency.max}\n                                    marks={this.marks.frequency.data}\n                                    step={this.marks.frequency.step}\n                                    value={frequency}\n                                    onChange={val => onChange({ value: val, name: 'frequency' })}\n                                  />\n                                </CardBody>\n                              </Card>\n                            </div>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Form>\n                    )\n                  }\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col xl=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <AppSwitch\n                        className=\"float-left mr-2\"\n                        variant=\"pill\"\n                        label\n                        color=\"success\"\n                        checked={this.state.autoFan}\n                        size=\"\"\n                        onChange={() => this.onSwitch({ value: !this.state.autoFan, name: 'autoFan' })}\n                      />\n                      <Badge size=\"sm\" color={this.state.autoFan ? 'success' : 'disabled'}>{this.state.autoFan ? 'Auto' : 'Manual'}</Badge>\n                      <i className=\"fa fa-wind mr-2 ml-2\"></i><Trans>Miner fan speed</Trans>\n                    </CardTitle>\n                    <CardSubtitle className=\"text-muted\"><Trans>Adjust the fan speed or set it automatic</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <div className=\"lead\">\n                      <p className=\"text-muted \">\n                        <Trans>The Apollo comes with auto tuned fan speed, but you can set your preferred values below.</Trans>\n                      </p>\n                    </div>\n                    {!this.state.autoFan &&\n                      <Form>\n                        <Row form>\n                          <Col lg={12} xl={6}>\n                            <div>\n                              <div className=\"clearfix\">\n                                <h4>Temperature to start fan <b>{fan_low}<span className=\"small\">°c</span></b></h4>\n                              </div>\n                              <div>\n                                <p className=\"text-muted \">\n                                  <Trans>This is the temperature needed to start the fan.</Trans>\n                                </p>\n                                <Card className=\"border-0\">\n                                  <CardBody>\n                                    <Slider\n                                      min={this.marks.fan_low.min}\n                                      max={this.marks.fan_low.max}\n                                      step={5}\n                                      marks={this.marks.fan_low.data}\n                                      value={fan_low}\n                                      onChange={val => onChange({ value: val, name: 'fan_low' })}\n                                    />\n                                  </CardBody>\n                                </Card>\n                              </div>\n                            </div>\n                          </Col>\n                          <Col lg={12} xl={6}>\n                            <div>\n                              <div className=\"clearfix\">\n                                <h4>Temperature for max fan speed <b>{fan_high}<span className=\"small\">°c</span></b></h4>\n                              </div>\n                              <div>\n                                <p className=\"text-muted \">\n                                  <Trans>This is the temperature needed to set the fan at maximum speed.</Trans>\n                                </p>\n                                <Card className=\"border-0\">\n                                  <CardBody>\n                                    <Slider\n                                      min={this.marks.fan_high.min}\n                                      max={this.marks.fan_high.max}\n                                      step={5}\n                                      marks={this.marks.fan_high.data}\n                                      value={fan_high}\n                                      onChange={val => onChange({ value: val, name: 'fan_high' })}\n                                    />\n                                  </CardBody>\n                                </Card>\n                              </div>\n                            </div>\n                          </Col>\n                        </Row>\n                      </Form>\n                    }\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default SettingsMiner;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Button,\n  Badge,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem,\n  Progress\n} from 'reactstrap';\n\nimport { wifiScanMcu, wifiConnectMcu, wifiDisconnectMcu } from '../../../actions/mcu';\nimport { percentColor } from '../../Filters';\n\nimport { Loading } from '../../Loading';\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass SettingsWifi extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ssid: null,\n      wifiPassword: '',\n      connected: null\n    };\n  }\n\n  handleScan = () => {\n    const { wifiScanMcu } = this.props;\n\n    wifiScanMcu();\n  }\n\n  handleClick = (ssid) => {\n    this.setState({\n      ssid: ssid,\n      connected: null\n    });\n  }\n\n  handleConnect = (event) => {\n    const { wifiConnectMcu } = this.props;\n    this.setState({ connected: true });\n\n    wifiConnectMcu({ ssid: this.state.ssid, passphrase: this.state.wifiPassword });\n\n    event.preventDefault();\n  }\n\n  handleDisconnect = () => {\n    const { wifiDisconnectMcu } = this.props;\n    this.setState({\n      ssid: null,\n      connected: false\n    });\n\n    wifiDisconnectMcu();\n  }\n\n  onChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  render() {\n    const { loadingWifiScan, loadingWifiConnect, loadingWifiDisconnect, wifiError, wifis, address, mcu } = this.props\n\n    const { wifiPassword, ssid, connected } = this.state\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              <Col lg=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <i className=\"fa fa-wifi mr-2\"></i><Trans>Wifi</Trans>\n                    </CardTitle>\n                    <CardSubtitle className=\"text-muted\"><Trans>Connect your system controller to a Wifi instead using ethernet</Trans></CardSubtitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Row>\n                      <Col md={6}>\n                        <div>\n                          <div className=\"clearfix\">\n                            <h4>\n                              { (mcu.stats.activeWifi) && ( <div className=\"d-inline mr-2\"><small className=\"text-muted\">Active wifi</small> <Badge color=\"success\" pill>{ mcu.stats.activeWifi }</Badge></div>) }\n                              <div className={ mcu.stats.activeWifi ? 'd-inline' : 'd-inline-block'}>\n                                { (mcu.stats.activeWifi) && ( <Button \n                                  className=\"float-left mr-2 text-uppercase\" \n                                  color={'warning'} \n                                  size=\"sm\"\n                                  disabled={ loadingWifiDisconnect }\n                                  onClick={ this.handleDisconnect }\n                                ><Trans>Disconnect</Trans></Button> ) }\n                                <Button \n                                  className=\"float-left mr-2 text-uppercase\" \n                                  color={'primary'} \n                                  size=\"sm\"\n                                  disabled={ loadingWifiDisconnect }\n                                  onClick={ this.handleScan }\n                                ><Trans>Scan</Trans></Button>\n                              </div>\n                            </h4>\n                            <div className=\"mt-1\">\n                              <p className=\"text-muted \">\n                                <Trans>Clicking the button your system will scan for available wifi networks. Clicking one of the available ssid will require to input the passphrase. Clicking the disconnect button will delete every wifi connections, if you are in trouble try to click disconnect before trying anything else.</Trans>\n                              </p>\n                            </div>\n                            { (ssid && !connected) ?\n                              <Form onSubmit={this.handleConnect} className=\"mt-4\">\n                                <Row form>\n                                  <Col md={12}>\n                                    <FormGroup>\n                                      <Label for=\"wifiPassword\"><Trans>Wifi <b>{ ssid }</b> Password</Trans></Label>\n                                      <Input\n                                        type=\"password\"\n                                        name=\"wifiPassword\"\n                                        id=\"wifiPassword\"\n                                        value={ wifiPassword }\n                                        onChange={ this.onChange }\n                                        bsSize=\"lg\"\n                                      />\n                                    </FormGroup>\n                                  </Col>\n                                  <Col md={12}>\n                                    <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={ this.handleConnect }><Trans>Connect</Trans></Button>\n                                  </Col>\n                                </Row>\n                              </Form>\n                              : null\n                            }\n                            { connected && (\n                              <div className=\"text-muted lead\">\n                                { (loadingWifiConnect) ?\n                                  <Loading />\n                                  :\n                                  (wifiError) ?\n                                    <Alert color=\"warning\">There was a problem connecting to the wifi, please doucle check the password. <b>{ wifiError }</b></Alert>\n                                    : <Alert color=\"success\">Your controller should be connected to <b>{ ssid }</b> Wifi now. Try to go to <a href={'http://' + address} className=\"font-weight-bold\">{ address }</a> before disconnecting the ethernet cable.</Alert>\n                                }\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </Col>\n                      <Col md={6}>\n                        <div>\n                          <div className=\"clearfix\">\n                            <h4><i className=\"fa fa-wifi mr-2 initialism text-secondary\"></i><Trans>Wifi networks</Trans></h4>\n                          </div>\n                        { (loadingWifiScan || loadingWifiDisconnect) ?\n                          <Loading />\n                          : \n                            (!wifis || !wifis.length) ?\n                              <div className=\"\">\n                                <p className=\"text-muted \">\n                                  <Trans>There are no wifi networks available yet. Please click the scan button to look at them.</Trans>\n                                </p>\n                              </div>\n                            :\n                              <ListGroup>\n                                { wifis.map((wifi, index) => {\n                                  return <ListGroupItem key={ index } className=\"border-0\">\n                                    <Button color=\"link\" className=\"p-0\" onClick={() => { this.handleClick(wifi.ssid) } }>{ wifi.ssid }</Button>\n                                    <Progress className=\"progress-xs\" color={ percentColor(wifi.signal, 'inverse') } value={ wifi.signal } />\n                                    <small className=\"text-muted\">Signal <b>{ wifi.signal }%</b></small>\n                                  </ListGroupItem>\n                                })}\n                              </ListGroup>\n                        }\n                        </div>\n                      </Col>\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    wifis: state.mcuWifiScan.data,\n    loadingWifiScan: state.mcuWifiScan.loading,\n    address: state.mcuWifiConnect.data,\n    wifiError: state.mcuWifiConnect.error,\n    loadingWifiConnect: state.mcuWifiConnect.loading,\n    loadingWifiDisconnect: state.mcuWifiDisconnect.loading,\n    mcu: state.mcuStats.data\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    wifiScanMcu: () => {\n      dispatch(wifiScanMcu())\n    },\n    wifiConnectMcu: ({ ssid, passphrase }) => {\n      dispatch(wifiConnectMcu({ ssid, passphrase }))\n    },\n    wifiDisconnectMcu: () => {\n      dispatch(wifiDisconnectMcu())\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsWifi);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Row,\n  Input,\n  FormGroup,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\n\nimport { toggleRestoreModal as toggleRestoreModalAction } from '../../actions/backup';\nimport { restoreConfiguration as restoreConfigurationAction } from '../../actions/backup';\n\nclass ModalsRestore extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: '',\n      backupError: '',\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.handleRestore = this.handleRestore.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleFileChosen = this.handleFileChosen.bind(this);\n  }\n\n  onChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleRestore() {\n    const {\n      content,\n    } = this.state;\n\n    const {\n      toggleRestoreModal,\n      restoreConfiguration,\n    } = this.props;\n\n    if (!content) {\n      this.setState({\n        backupError: 'Backup file is required.',\n      });\n      return;\n    }\n\n    let backup = '';\n\n    try {\n      backup = JSON.parse(content);\n    } catch (err) {\n      this.setState({\n        backupError: 'Invalid backup file',\n      });\n      return;\n    }\n\n    if (!backup.settings || !backup.pools) {\n      this.setState({\n        backupError: 'Invalid backup file',\n      });\n      return;\n    }\n\n    restoreConfiguration(backup);\n    toggleRestoreModal(false);\n  }\n\n  handleClose() {\n    const {\n      toggleRestoreModal,\n    } = this.props;\n\n    // TODO: Add restore\n\n    toggleRestoreModal(false);\n  }\n\n  handleFileChosen(file) {\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      this.setState({\n        content: evt.target.result,\n      });\n    };\n    reader.readAsText(file);\n  }\n\n  render() {\n    const {\n      show,\n      className,\n    } = this.props;\n\n    const {\n      backupError,\n    } = this.state;\n\n    return (\n      <div>\n        <Modal isOpen={show} className={className} size=\"md\">\n          <ModalHeader className=\"bg-light\">Restore backup configuration</ModalHeader>\n          <ModalBody>\n            <div className=\"animated fadeIn\">\n              <Row>\n                <Col lg=\"12\">\n                  <Card className=\"border-0\">\n                    <CardBody>\n                      <FormGroup className=\"mb-0\">\n                        <Input\n                          type=\"file\"\n                          name=\"backup\"\n                          id=\"backup\"\n                          bsSize=\"lg\"\n                          onChange={e => this.handleFileChosen(e.target.files[0])}\n                        />\n                        <span className=\"text-danger\">\n                          {backupError}\n                        </span>\n                      </FormGroup>\n                    </CardBody>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={this.handleClose}>Close</Button>\n            <Button color=\"primary\" onClick={this.handleRestore}>Restore</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  show: state.backup.status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleRestoreModal: (status) => {\n    dispatch(toggleRestoreModalAction({ status }));\n  },\n  restoreConfiguration: (backup) => {\n    dispatch(restoreConfigurationAction({ backup }));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalsRestore);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { AppSwitch } from '@coreui/react';\nimport {\n  Button,\n  CardDeck,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardSubtitle,\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem,\n} from 'reactstrap';\nimport ModalsRestore from '../../Modals/ModalsRestore';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\n\nimport { changePassword as changePasswordAction } from '../../../actions/auth';\nimport { backupConfiguration as backupConfigurationAction } from '../../../actions/backup';\nimport { toggleRestoreModal as toggleRestoreModalAction } from '../../../actions/backup';\n\nclass SettingsGeneral extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n      repeatPassword: '',\n      passwordError: '',\n      repeatPasswordError: '',\n    };\n\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.handleBackupConfiguration = this.handleBackupConfiguration.bind(this);\n    this.handletoggleRestoreModal = this.handletoggleRestoreModal.bind(this);\n  }\n\n  onChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  handlePasswordChange() {\n    const {\n      password,\n      repeatPassword,\n    } = this.state;\n\n    const {\n      changePassword,\n    } = this.props;\n\n    if (!password) {\n      this.setState({\n        passwordError: 'Password is required.',\n      });\n      return;\n    }\n\n    if (password !== repeatPassword) {\n      this.setState({\n        passwordError: 'Passwords do not match.',\n        repeatPasswordError: 'Passwords do not match.',\n      });\n      return;\n    }\n\n    changePassword(password);\n  }\n\n  handleBackupConfiguration() {\n    const {\n      backupConfiguration,\n    } = this.props;\n\n    backupConfiguration();\n  }\n\n  handletoggleRestoreModal() {\n    const {\n      toggleRestoreModal,\n    } = this.props;\n\n    toggleRestoreModal(true);\n  }\n\n  render() {\n    const {\n      leftSidebarVisibility,\n      leftSidebarExtended,\n      rightSidebarVisibility,\n      temperatureUnit,\n      onChange,\n    } = this.props;\n\n    const {\n      password,\n      repeatPassword,\n      passwordError,\n      repeatPasswordError,\n    } = this.state;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <div className=\"animated fadeIn\">\n            <CardDeck>\n              { /* Lockscreen */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><i className=\"fa fa-key mr-2\"></i><Trans>Change lockscreen password</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Change the password to access the dashboard</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <p className=\"help-block form-text text-muted\">\n                    <Trans>Changing the password will lock the dashboard. You will need to use the new password to unlock it.</Trans>\n                  </p>\n                  <Form>\n                    <Row form>\n                      <Col lg={12} xl={6}>\n                        <FormGroup>\n                          <Label for=\"password\"><Trans>Password</Trans></Label>\n                          <Input\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"password\"\n                            bsSize=\"lg\"\n                            value={password}\n                            onChange={this.onChange}\n                          />\n                          <span className=\"text-danger\">\n                            {passwordError}\n                          </span>\n                        </FormGroup>\n                      </Col>\n                      <Col lg={12} xl={6}>\n                        <FormGroup>\n                          <Label for=\"repeatPassword\"><Trans>Repeat password</Trans></Label>\n                          <Input\n                            type=\"password\"\n                            name=\"repeatPassword\"\n                            id=\"repeatPassword\"\n                            placeholder=\"\"\n                            bsSize=\"lg\"\n                            value={repeatPassword}\n                            onChange={this.onChange}\n                          />\n                          <span className=\"text-danger\">\n                            {repeatPasswordError}\n                          </span>\n                        </FormGroup>\n                      </Col>\n                      <Col md={12}>\n                        <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={this.handlePasswordChange}><Trans>Change</Trans></Button>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n\n              { /* Layout */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><i className=\"fa fa-sliders-h mr-2\"></i><Trans>Layout options</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Manage dashboard specific configurations</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <Row>\n                      <Col xl={12}>\n                        <ListGroup flush>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={leftSidebarVisibility}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'leftSidebarVisibility', value: !leftSidebarVisibility })}\n                              />\n                              <div><Trans>Left Sidebar visibility</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set left sidebar default visibility</Trans></div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={leftSidebarExtended}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'leftSidebarExtended', value: !leftSidebarExtended })}\n                              />\n                              <div><Trans>Extended sidebar</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Keep left sidebar extended or only icons</Trans></div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                dataOn=\"°C\"\n                                dataOff=\"°F\"\n                                label\n                                color=\"success\"\n                                checked={temperatureUnit === 'c'}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'temperatureUnit', value: temperatureUnit === 'f' ? 'c' : 'f' })}\n                              />\n                              <div><Trans>Temperature unit</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set it to Celsius or Fahrenheit</Trans></div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"clearfix\">\n                              <AppSwitch\n                                className=\"float-left mr-2\"\n                                variant=\"pill\"\n                                label\n                                color=\"success\"\n                                checked={rightSidebarVisibility}\n                                size=\"\"\n                                onChange={() => onChange({ name: 'rightSidebarVisibility', value: !rightSidebarVisibility })}\n                              />\n                              <div><Trans>Right sidebar visibility</Trans></div>\n                            </div>\n                            <div className=\"mt-1 small text-muted\"><Trans>Set right sidebar default visibility</Trans></div>\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n\n              { /* Backup/Reset */ }\n              <Card>\n                <CardHeader>\n                  <CardTitle><i className=\"fa fa-save mr-2\"></i><Trans>Backup &amp; Reset</Trans></CardTitle>\n                  <CardSubtitle className=\"text-muted\"><Trans>Use this tools to backup, restore and reset configurations</Trans></CardSubtitle>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <Row form>\n                      <Col md={12}>\n                        <ListGroup flush>\n                          <ListGroupItem>\n                            <div className=\"\">\n                              <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={this.handleBackupConfiguration}><Trans>Backup</Trans></Button>\n                              <div className=\"mt-1 small text-muted\"><Trans>Create a backup file of dashboard, miner and pools configurations</Trans></div>\n                            </div>\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            <div className=\"\">\n                              <Button className=\"mr-2 text-uppercase\" color=\"primary\" size=\"sm\" onClick={this.handletoggleRestoreModal}><Trans>Restore</Trans></Button>\n                              <div className=\"mt-1 small text-muted\"><Trans>Restore all configurations from a backup file</Trans></div>\n                            </div>\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n            </CardDeck>\n\n            <ModalsRestore />\n          </div>\n        )}\n      </I18n>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  changePassword: (password) => {\n    dispatch(changePasswordAction({ password }));\n  },\n  backupConfiguration: () => {\n    dispatch(backupConfigurationAction());\n  },\n  toggleRestoreModal: (status) => {\n    dispatch(toggleRestoreModalAction({ status }));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(SettingsGeneral);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  Col,\n  Row,\n} from 'reactstrap';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\n\nimport { Trans } from '@lingui/macro';\n\nimport SettingsMiner from './SettingsMiner/SettingsMiner';\nimport SettingsWifi from './SettingsWifi/SettingsWifi';\nimport SettingsGeneral from './SettingsGeneral/SettingsGeneral';\nimport { saveSettings, saveSettingsAndRestartMiner } from '../../actions/settings';\n\nconst restartFields = [\n  'minerMode',\n  'frequency',\n  'apiAllow'\n];\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      settings,\n    } = this.props;\n\n    this.state = {\n      settings: { ...settings },\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleSaveAndRestart = this.handleSaveAndRestart.bind(this);\n  }\n\n  onChange({ name, value }) {\n    this.setState(state => ({\n      settings: {\n        ...state.settings,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSave() {\n    const { save } = this.props;\n    const { settings } = this.state;\n\n    save(settings);\n  }\n\n  handleSaveAndRestart() {\n    const { saveAndRestart } = this.props;\n    const { settings } = this.state;\n\n    saveAndRestart(settings);\n  }\n\n  render() {\n    const {\n      settings: {\n        minerMode,\n        voltage,\n        frequency,\n        fan_low,\n        fan_high,\n        customApproval,\n        apiAllow,\n        leftSidebarVisibility,\n        leftSidebarExtended,\n        rightSidebarVisibility,\n        temperatureUnit,\n      },\n      settings,\n    } = this.state;\n\n    const { oldSettings } = this.props;\n\n    const changed = !isEqual(settings, oldSettings);\n    const restartNeeded = !isEqual(pick(settings, restartFields), pick(oldSettings, restartFields));\n    return (\n      <div className=\"animated fadeIn\">\n        { changed && (\n        <Row>\n          <Col lg=\"12\">\n            <Card>\n              <CardHeader className=\"bg-dark\">\n                { !restartNeeded && (\n                  <Button\n                    size=\"sm\"\n                    className=\"btn-success text-uppercase mr-2\"\n                    disabled={!changed}\n                    onClick={this.handleSave}\n                  >\n                    <Trans>Save</Trans>\n                  </Button>\n                )}\n                { restartNeeded && (\n                  <Button\n                    size=\"sm\"\n                    className=\"btn-warning text-uppercase\"\n                    onClick={this.handleSaveAndRestart}\n                  >\n                    <Trans>Save &amp; Restart</Trans>\n                  </Button>\n                )}\n                { restartNeeded && <span className=\"ml-2\"><Trans>You need to restart your miner to apply changes.</Trans></span> }\n                { !restartNeeded && changed && <span className=\"ml-2\"><Trans>You need to save your settings to apply changes (miner won't be restarted).</Trans></span> }\n              </CardHeader>\n            </Card>\n          </Col>\n        </Row>\n        )}\n\n        { /* Miner conf */ }\n        <SettingsMiner\n          {...{\n            minerMode, voltage, frequency, fan_low, fan_high, customApproval, apiAllow\n          }}\n          onChange={this.onChange}\n        />\n\n        { /* Wifi */ }\n\n        <SettingsWifi />\n\n        { /* General options */ }\n        <SettingsGeneral\n          {...{\n            leftSidebarVisibility, leftSidebarExtended, rightSidebarVisibility, temperatureUnit,\n          }}\n          onChange={this.onChange}\n        />\n\n        <p />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  oldSettings: state.settings,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  save: (settings) => {\n    dispatch(saveSettings(settings));\n  },\n  saveAndRestart: (settings) => {\n    dispatch(saveSettingsAndRestartMiner(settings));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import Settings from './Settings'\n\nexport default Settings"],"sourceRoot":""}